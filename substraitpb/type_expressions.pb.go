// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.3
// source: substrait/type_expressions.proto

package substraitpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DerivationExpression_UnaryOp_UnaryOpType int32

const (
	DerivationExpression_UnaryOp_UNARY_OP_TYPE_UNSPECIFIED DerivationExpression_UnaryOp_UnaryOpType = 0
	DerivationExpression_UnaryOp_UNARY_OP_TYPE_BOOLEAN_NOT DerivationExpression_UnaryOp_UnaryOpType = 1
)

// Enum value maps for DerivationExpression_UnaryOp_UnaryOpType.
var (
	DerivationExpression_UnaryOp_UnaryOpType_name = map[int32]string{
		0: "UNARY_OP_TYPE_UNSPECIFIED",
		1: "UNARY_OP_TYPE_BOOLEAN_NOT",
	}
	DerivationExpression_UnaryOp_UnaryOpType_value = map[string]int32{
		"UNARY_OP_TYPE_UNSPECIFIED": 0,
		"UNARY_OP_TYPE_BOOLEAN_NOT": 1,
	}
)

func (x DerivationExpression_UnaryOp_UnaryOpType) Enum() *DerivationExpression_UnaryOp_UnaryOpType {
	p := new(DerivationExpression_UnaryOp_UnaryOpType)
	*p = x
	return p
}

func (x DerivationExpression_UnaryOp_UnaryOpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DerivationExpression_UnaryOp_UnaryOpType) Descriptor() protoreflect.EnumDescriptor {
	return file_substrait_type_expressions_proto_enumTypes[0].Descriptor()
}

func (DerivationExpression_UnaryOp_UnaryOpType) Type() protoreflect.EnumType {
	return &file_substrait_type_expressions_proto_enumTypes[0]
}

func (x DerivationExpression_UnaryOp_UnaryOpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DerivationExpression_UnaryOp_UnaryOpType.Descriptor instead.
func (DerivationExpression_UnaryOp_UnaryOpType) EnumDescriptor() ([]byte, []int) {
	return file_substrait_type_expressions_proto_rawDescGZIP(), []int{0, 15, 0}
}

type DerivationExpression_BinaryOp_BinaryOpType int32

const (
	DerivationExpression_BinaryOp_BINARY_OP_TYPE_UNSPECIFIED  DerivationExpression_BinaryOp_BinaryOpType = 0
	DerivationExpression_BinaryOp_BINARY_OP_TYPE_PLUS         DerivationExpression_BinaryOp_BinaryOpType = 1
	DerivationExpression_BinaryOp_BINARY_OP_TYPE_MINUS        DerivationExpression_BinaryOp_BinaryOpType = 2
	DerivationExpression_BinaryOp_BINARY_OP_TYPE_MULTIPLY     DerivationExpression_BinaryOp_BinaryOpType = 3
	DerivationExpression_BinaryOp_BINARY_OP_TYPE_DIVIDE       DerivationExpression_BinaryOp_BinaryOpType = 4
	DerivationExpression_BinaryOp_BINARY_OP_TYPE_MIN          DerivationExpression_BinaryOp_BinaryOpType = 5
	DerivationExpression_BinaryOp_BINARY_OP_TYPE_MAX          DerivationExpression_BinaryOp_BinaryOpType = 6
	DerivationExpression_BinaryOp_BINARY_OP_TYPE_GREATER_THAN DerivationExpression_BinaryOp_BinaryOpType = 7
	DerivationExpression_BinaryOp_BINARY_OP_TYPE_LESS_THAN    DerivationExpression_BinaryOp_BinaryOpType = 8
	DerivationExpression_BinaryOp_BINARY_OP_TYPE_AND          DerivationExpression_BinaryOp_BinaryOpType = 9
	DerivationExpression_BinaryOp_BINARY_OP_TYPE_OR           DerivationExpression_BinaryOp_BinaryOpType = 10
	DerivationExpression_BinaryOp_BINARY_OP_TYPE_EQUALS       DerivationExpression_BinaryOp_BinaryOpType = 11
	DerivationExpression_BinaryOp_BINARY_OP_TYPE_COVERS       DerivationExpression_BinaryOp_BinaryOpType = 12
)

// Enum value maps for DerivationExpression_BinaryOp_BinaryOpType.
var (
	DerivationExpression_BinaryOp_BinaryOpType_name = map[int32]string{
		0:  "BINARY_OP_TYPE_UNSPECIFIED",
		1:  "BINARY_OP_TYPE_PLUS",
		2:  "BINARY_OP_TYPE_MINUS",
		3:  "BINARY_OP_TYPE_MULTIPLY",
		4:  "BINARY_OP_TYPE_DIVIDE",
		5:  "BINARY_OP_TYPE_MIN",
		6:  "BINARY_OP_TYPE_MAX",
		7:  "BINARY_OP_TYPE_GREATER_THAN",
		8:  "BINARY_OP_TYPE_LESS_THAN",
		9:  "BINARY_OP_TYPE_AND",
		10: "BINARY_OP_TYPE_OR",
		11: "BINARY_OP_TYPE_EQUALS",
		12: "BINARY_OP_TYPE_COVERS",
	}
	DerivationExpression_BinaryOp_BinaryOpType_value = map[string]int32{
		"BINARY_OP_TYPE_UNSPECIFIED":  0,
		"BINARY_OP_TYPE_PLUS":         1,
		"BINARY_OP_TYPE_MINUS":        2,
		"BINARY_OP_TYPE_MULTIPLY":     3,
		"BINARY_OP_TYPE_DIVIDE":       4,
		"BINARY_OP_TYPE_MIN":          5,
		"BINARY_OP_TYPE_MAX":          6,
		"BINARY_OP_TYPE_GREATER_THAN": 7,
		"BINARY_OP_TYPE_LESS_THAN":    8,
		"BINARY_OP_TYPE_AND":          9,
		"BINARY_OP_TYPE_OR":           10,
		"BINARY_OP_TYPE_EQUALS":       11,
		"BINARY_OP_TYPE_COVERS":       12,
	}
)

func (x DerivationExpression_BinaryOp_BinaryOpType) Enum() *DerivationExpression_BinaryOp_BinaryOpType {
	p := new(DerivationExpression_BinaryOp_BinaryOpType)
	*p = x
	return p
}

func (x DerivationExpression_BinaryOp_BinaryOpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DerivationExpression_BinaryOp_BinaryOpType) Descriptor() protoreflect.EnumDescriptor {
	return file_substrait_type_expressions_proto_enumTypes[1].Descriptor()
}

func (DerivationExpression_BinaryOp_BinaryOpType) Type() protoreflect.EnumType {
	return &file_substrait_type_expressions_proto_enumTypes[1]
}

func (x DerivationExpression_BinaryOp_BinaryOpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DerivationExpression_BinaryOp_BinaryOpType.Descriptor instead.
func (DerivationExpression_BinaryOp_BinaryOpType) EnumDescriptor() ([]byte, []int) {
	return file_substrait_type_expressions_proto_rawDescGZIP(), []int{0, 16, 0}
}

type DerivationExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*DerivationExpression_Bool
	//	*DerivationExpression_I8
	//	*DerivationExpression_I16
	//	*DerivationExpression_I32
	//	*DerivationExpression_I64
	//	*DerivationExpression_Fp32
	//	*DerivationExpression_Fp64
	//	*DerivationExpression_String_
	//	*DerivationExpression_Binary
	//	*DerivationExpression_Timestamp
	//	*DerivationExpression_Date
	//	*DerivationExpression_Time
	//	*DerivationExpression_IntervalYear
	//	*DerivationExpression_TimestampTz
	//	*DerivationExpression_Uuid
	//	*DerivationExpression_IntervalDay
	//	*DerivationExpression_IntervalCompound
	//	*DerivationExpression_FixedChar
	//	*DerivationExpression_Varchar
	//	*DerivationExpression_FixedBinary
	//	*DerivationExpression_Decimal
	//	*DerivationExpression_PrecisionTime
	//	*DerivationExpression_PrecisionTimestamp
	//	*DerivationExpression_PrecisionTimestampTz
	//	*DerivationExpression_Struct
	//	*DerivationExpression_List
	//	*DerivationExpression_Map
	//	*DerivationExpression_UserDefined
	//	*DerivationExpression_UserDefinedPointer
	//	*DerivationExpression_TypeParameterName
	//	*DerivationExpression_IntegerParameterName
	//	*DerivationExpression_IntegerLiteral
	//	*DerivationExpression_UnaryOp_
	//	*DerivationExpression_BinaryOp_
	//	*DerivationExpression_IfElse_
	//	*DerivationExpression_ReturnProgram_
	Kind isDerivationExpression_Kind `protobuf_oneof:"kind"`
}

func (x *DerivationExpression) Reset() {
	*x = DerivationExpression{}
	mi := &file_substrait_type_expressions_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivationExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationExpression) ProtoMessage() {}

func (x *DerivationExpression) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_type_expressions_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationExpression.ProtoReflect.Descriptor instead.
func (*DerivationExpression) Descriptor() ([]byte, []int) {
	return file_substrait_type_expressions_proto_rawDescGZIP(), []int{0}
}

func (m *DerivationExpression) GetKind() isDerivationExpression_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *DerivationExpression) GetBool() *Type_Boolean {
	if x, ok := x.GetKind().(*DerivationExpression_Bool); ok {
		return x.Bool
	}
	return nil
}

func (x *DerivationExpression) GetI8() *Type_I8 {
	if x, ok := x.GetKind().(*DerivationExpression_I8); ok {
		return x.I8
	}
	return nil
}

func (x *DerivationExpression) GetI16() *Type_I16 {
	if x, ok := x.GetKind().(*DerivationExpression_I16); ok {
		return x.I16
	}
	return nil
}

func (x *DerivationExpression) GetI32() *Type_I32 {
	if x, ok := x.GetKind().(*DerivationExpression_I32); ok {
		return x.I32
	}
	return nil
}

func (x *DerivationExpression) GetI64() *Type_I64 {
	if x, ok := x.GetKind().(*DerivationExpression_I64); ok {
		return x.I64
	}
	return nil
}

func (x *DerivationExpression) GetFp32() *Type_FP32 {
	if x, ok := x.GetKind().(*DerivationExpression_Fp32); ok {
		return x.Fp32
	}
	return nil
}

func (x *DerivationExpression) GetFp64() *Type_FP64 {
	if x, ok := x.GetKind().(*DerivationExpression_Fp64); ok {
		return x.Fp64
	}
	return nil
}

func (x *DerivationExpression) GetString_() *Type_String {
	if x, ok := x.GetKind().(*DerivationExpression_String_); ok {
		return x.String_
	}
	return nil
}

func (x *DerivationExpression) GetBinary() *Type_Binary {
	if x, ok := x.GetKind().(*DerivationExpression_Binary); ok {
		return x.Binary
	}
	return nil
}

// Deprecated: Marked as deprecated in substrait/type_expressions.proto.
func (x *DerivationExpression) GetTimestamp() *Type_Timestamp {
	if x, ok := x.GetKind().(*DerivationExpression_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *DerivationExpression) GetDate() *Type_Date {
	if x, ok := x.GetKind().(*DerivationExpression_Date); ok {
		return x.Date
	}
	return nil
}

// Deprecated: Marked as deprecated in substrait/type_expressions.proto.
func (x *DerivationExpression) GetTime() *Type_Time {
	if x, ok := x.GetKind().(*DerivationExpression_Time); ok {
		return x.Time
	}
	return nil
}

func (x *DerivationExpression) GetIntervalYear() *Type_IntervalYear {
	if x, ok := x.GetKind().(*DerivationExpression_IntervalYear); ok {
		return x.IntervalYear
	}
	return nil
}

// Deprecated: Marked as deprecated in substrait/type_expressions.proto.
func (x *DerivationExpression) GetTimestampTz() *Type_TimestampTZ {
	if x, ok := x.GetKind().(*DerivationExpression_TimestampTz); ok {
		return x.TimestampTz
	}
	return nil
}

func (x *DerivationExpression) GetUuid() *Type_UUID {
	if x, ok := x.GetKind().(*DerivationExpression_Uuid); ok {
		return x.Uuid
	}
	return nil
}

func (x *DerivationExpression) GetIntervalDay() *DerivationExpression_ExpressionIntervalDay {
	if x, ok := x.GetKind().(*DerivationExpression_IntervalDay); ok {
		return x.IntervalDay
	}
	return nil
}

func (x *DerivationExpression) GetIntervalCompound() *DerivationExpression_ExpressionIntervalCompound {
	if x, ok := x.GetKind().(*DerivationExpression_IntervalCompound); ok {
		return x.IntervalCompound
	}
	return nil
}

func (x *DerivationExpression) GetFixedChar() *DerivationExpression_ExpressionFixedChar {
	if x, ok := x.GetKind().(*DerivationExpression_FixedChar); ok {
		return x.FixedChar
	}
	return nil
}

func (x *DerivationExpression) GetVarchar() *DerivationExpression_ExpressionVarChar {
	if x, ok := x.GetKind().(*DerivationExpression_Varchar); ok {
		return x.Varchar
	}
	return nil
}

func (x *DerivationExpression) GetFixedBinary() *DerivationExpression_ExpressionFixedBinary {
	if x, ok := x.GetKind().(*DerivationExpression_FixedBinary); ok {
		return x.FixedBinary
	}
	return nil
}

func (x *DerivationExpression) GetDecimal() *DerivationExpression_ExpressionDecimal {
	if x, ok := x.GetKind().(*DerivationExpression_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *DerivationExpression) GetPrecisionTime() *DerivationExpression_ExpressionPrecisionTime {
	if x, ok := x.GetKind().(*DerivationExpression_PrecisionTime); ok {
		return x.PrecisionTime
	}
	return nil
}

func (x *DerivationExpression) GetPrecisionTimestamp() *DerivationExpression_ExpressionPrecisionTimestamp {
	if x, ok := x.GetKind().(*DerivationExpression_PrecisionTimestamp); ok {
		return x.PrecisionTimestamp
	}
	return nil
}

func (x *DerivationExpression) GetPrecisionTimestampTz() *DerivationExpression_ExpressionPrecisionTimestampTZ {
	if x, ok := x.GetKind().(*DerivationExpression_PrecisionTimestampTz); ok {
		return x.PrecisionTimestampTz
	}
	return nil
}

func (x *DerivationExpression) GetStruct() *DerivationExpression_ExpressionStruct {
	if x, ok := x.GetKind().(*DerivationExpression_Struct); ok {
		return x.Struct
	}
	return nil
}

func (x *DerivationExpression) GetList() *DerivationExpression_ExpressionList {
	if x, ok := x.GetKind().(*DerivationExpression_List); ok {
		return x.List
	}
	return nil
}

func (x *DerivationExpression) GetMap() *DerivationExpression_ExpressionMap {
	if x, ok := x.GetKind().(*DerivationExpression_Map); ok {
		return x.Map
	}
	return nil
}

func (x *DerivationExpression) GetUserDefined() *DerivationExpression_ExpressionUserDefined {
	if x, ok := x.GetKind().(*DerivationExpression_UserDefined); ok {
		return x.UserDefined
	}
	return nil
}

// Deprecated: Marked as deprecated in substrait/type_expressions.proto.
func (x *DerivationExpression) GetUserDefinedPointer() uint32 {
	if x, ok := x.GetKind().(*DerivationExpression_UserDefinedPointer); ok {
		return x.UserDefinedPointer
	}
	return 0
}

func (x *DerivationExpression) GetTypeParameterName() string {
	if x, ok := x.GetKind().(*DerivationExpression_TypeParameterName); ok {
		return x.TypeParameterName
	}
	return ""
}

func (x *DerivationExpression) GetIntegerParameterName() string {
	if x, ok := x.GetKind().(*DerivationExpression_IntegerParameterName); ok {
		return x.IntegerParameterName
	}
	return ""
}

func (x *DerivationExpression) GetIntegerLiteral() int32 {
	if x, ok := x.GetKind().(*DerivationExpression_IntegerLiteral); ok {
		return x.IntegerLiteral
	}
	return 0
}

func (x *DerivationExpression) GetUnaryOp() *DerivationExpression_UnaryOp {
	if x, ok := x.GetKind().(*DerivationExpression_UnaryOp_); ok {
		return x.UnaryOp
	}
	return nil
}

func (x *DerivationExpression) GetBinaryOp() *DerivationExpression_BinaryOp {
	if x, ok := x.GetKind().(*DerivationExpression_BinaryOp_); ok {
		return x.BinaryOp
	}
	return nil
}

func (x *DerivationExpression) GetIfElse() *DerivationExpression_IfElse {
	if x, ok := x.GetKind().(*DerivationExpression_IfElse_); ok {
		return x.IfElse
	}
	return nil
}

func (x *DerivationExpression) GetReturnProgram() *DerivationExpression_ReturnProgram {
	if x, ok := x.GetKind().(*DerivationExpression_ReturnProgram_); ok {
		return x.ReturnProgram
	}
	return nil
}

type isDerivationExpression_Kind interface {
	isDerivationExpression_Kind()
}

type DerivationExpression_Bool struct {
	Bool *Type_Boolean `protobuf:"bytes,1,opt,name=bool,proto3,oneof"`
}

type DerivationExpression_I8 struct {
	I8 *Type_I8 `protobuf:"bytes,2,opt,name=i8,proto3,oneof"`
}

type DerivationExpression_I16 struct {
	I16 *Type_I16 `protobuf:"bytes,3,opt,name=i16,proto3,oneof"`
}

type DerivationExpression_I32 struct {
	I32 *Type_I32 `protobuf:"bytes,5,opt,name=i32,proto3,oneof"`
}

type DerivationExpression_I64 struct {
	I64 *Type_I64 `protobuf:"bytes,7,opt,name=i64,proto3,oneof"`
}

type DerivationExpression_Fp32 struct {
	Fp32 *Type_FP32 `protobuf:"bytes,10,opt,name=fp32,proto3,oneof"`
}

type DerivationExpression_Fp64 struct {
	Fp64 *Type_FP64 `protobuf:"bytes,11,opt,name=fp64,proto3,oneof"`
}

type DerivationExpression_String_ struct {
	String_ *Type_String `protobuf:"bytes,12,opt,name=string,proto3,oneof"`
}

type DerivationExpression_Binary struct {
	Binary *Type_Binary `protobuf:"bytes,13,opt,name=binary,proto3,oneof"`
}

type DerivationExpression_Timestamp struct {
	// Deprecated in favor of `ExpressionPrecisionTimestamp precision_timestamp`
	//
	// Deprecated: Marked as deprecated in substrait/type_expressions.proto.
	Timestamp *Type_Timestamp `protobuf:"bytes,14,opt,name=timestamp,proto3,oneof"`
}

type DerivationExpression_Date struct {
	Date *Type_Date `protobuf:"bytes,16,opt,name=date,proto3,oneof"`
}

type DerivationExpression_Time struct {
	// Deprecated in favor of `ExpressionPrecisionTime precision_time`
	//
	// Deprecated: Marked as deprecated in substrait/type_expressions.proto.
	Time *Type_Time `protobuf:"bytes,17,opt,name=time,proto3,oneof"`
}

type DerivationExpression_IntervalYear struct {
	IntervalYear *Type_IntervalYear `protobuf:"bytes,19,opt,name=interval_year,json=intervalYear,proto3,oneof"`
}

type DerivationExpression_TimestampTz struct {
	// Deprecated in favor of `ExpressionPrecisionTimestampTZ precision_timestamp_tz`
	//
	// Deprecated: Marked as deprecated in substrait/type_expressions.proto.
	TimestampTz *Type_TimestampTZ `protobuf:"bytes,29,opt,name=timestamp_tz,json=timestampTz,proto3,oneof"`
}

type DerivationExpression_Uuid struct {
	Uuid *Type_UUID `protobuf:"bytes,32,opt,name=uuid,proto3,oneof"`
}

type DerivationExpression_IntervalDay struct {
	IntervalDay *DerivationExpression_ExpressionIntervalDay `protobuf:"bytes,20,opt,name=interval_day,json=intervalDay,proto3,oneof"`
}

type DerivationExpression_IntervalCompound struct {
	IntervalCompound *DerivationExpression_ExpressionIntervalCompound `protobuf:"bytes,42,opt,name=interval_compound,json=intervalCompound,proto3,oneof"`
}

type DerivationExpression_FixedChar struct {
	FixedChar *DerivationExpression_ExpressionFixedChar `protobuf:"bytes,21,opt,name=fixed_char,json=fixedChar,proto3,oneof"`
}

type DerivationExpression_Varchar struct {
	Varchar *DerivationExpression_ExpressionVarChar `protobuf:"bytes,22,opt,name=varchar,proto3,oneof"`
}

type DerivationExpression_FixedBinary struct {
	FixedBinary *DerivationExpression_ExpressionFixedBinary `protobuf:"bytes,23,opt,name=fixed_binary,json=fixedBinary,proto3,oneof"`
}

type DerivationExpression_Decimal struct {
	Decimal *DerivationExpression_ExpressionDecimal `protobuf:"bytes,24,opt,name=decimal,proto3,oneof"`
}

type DerivationExpression_PrecisionTime struct {
	PrecisionTime *DerivationExpression_ExpressionPrecisionTime `protobuf:"bytes,43,opt,name=precision_time,json=precisionTime,proto3,oneof"`
}

type DerivationExpression_PrecisionTimestamp struct {
	PrecisionTimestamp *DerivationExpression_ExpressionPrecisionTimestamp `protobuf:"bytes,40,opt,name=precision_timestamp,json=precisionTimestamp,proto3,oneof"`
}

type DerivationExpression_PrecisionTimestampTz struct {
	PrecisionTimestampTz *DerivationExpression_ExpressionPrecisionTimestampTZ `protobuf:"bytes,41,opt,name=precision_timestamp_tz,json=precisionTimestampTz,proto3,oneof"`
}

type DerivationExpression_Struct struct {
	Struct *DerivationExpression_ExpressionStruct `protobuf:"bytes,25,opt,name=struct,proto3,oneof"`
}

type DerivationExpression_List struct {
	List *DerivationExpression_ExpressionList `protobuf:"bytes,27,opt,name=list,proto3,oneof"`
}

type DerivationExpression_Map struct {
	Map *DerivationExpression_ExpressionMap `protobuf:"bytes,28,opt,name=map,proto3,oneof"`
}

type DerivationExpression_UserDefined struct {
	UserDefined *DerivationExpression_ExpressionUserDefined `protobuf:"bytes,30,opt,name=user_defined,json=userDefined,proto3,oneof"`
}

type DerivationExpression_UserDefinedPointer struct {
	// Deprecated in favor of user_defined, which allows nullability and
	// variations to be specified. If user_defined_pointer is encountered,
	// treat it as being non-nullable and having the default variation.
	//
	// Deprecated: Marked as deprecated in substrait/type_expressions.proto.
	UserDefinedPointer uint32 `protobuf:"varint,31,opt,name=user_defined_pointer,json=userDefinedPointer,proto3,oneof"`
}

type DerivationExpression_TypeParameterName struct {
	TypeParameterName string `protobuf:"bytes,33,opt,name=type_parameter_name,json=typeParameterName,proto3,oneof"`
}

type DerivationExpression_IntegerParameterName struct {
	IntegerParameterName string `protobuf:"bytes,34,opt,name=integer_parameter_name,json=integerParameterName,proto3,oneof"`
}

type DerivationExpression_IntegerLiteral struct {
	IntegerLiteral int32 `protobuf:"varint,35,opt,name=integer_literal,json=integerLiteral,proto3,oneof"`
}

type DerivationExpression_UnaryOp_ struct {
	UnaryOp *DerivationExpression_UnaryOp `protobuf:"bytes,36,opt,name=unary_op,json=unaryOp,proto3,oneof"`
}

type DerivationExpression_BinaryOp_ struct {
	BinaryOp *DerivationExpression_BinaryOp `protobuf:"bytes,37,opt,name=binary_op,json=binaryOp,proto3,oneof"`
}

type DerivationExpression_IfElse_ struct {
	IfElse *DerivationExpression_IfElse `protobuf:"bytes,38,opt,name=if_else,json=ifElse,proto3,oneof"`
}

type DerivationExpression_ReturnProgram_ struct {
	ReturnProgram *DerivationExpression_ReturnProgram `protobuf:"bytes,39,opt,name=return_program,json=returnProgram,proto3,oneof"`
}

func (*DerivationExpression_Bool) isDerivationExpression_Kind() {}

func (*DerivationExpression_I8) isDerivationExpression_Kind() {}

func (*DerivationExpression_I16) isDerivationExpression_Kind() {}

func (*DerivationExpression_I32) isDerivationExpression_Kind() {}

func (*DerivationExpression_I64) isDerivationExpression_Kind() {}

func (*DerivationExpression_Fp32) isDerivationExpression_Kind() {}

func (*DerivationExpression_Fp64) isDerivationExpression_Kind() {}

func (*DerivationExpression_String_) isDerivationExpression_Kind() {}

func (*DerivationExpression_Binary) isDerivationExpression_Kind() {}

func (*DerivationExpression_Timestamp) isDerivationExpression_Kind() {}

func (*DerivationExpression_Date) isDerivationExpression_Kind() {}

func (*DerivationExpression_Time) isDerivationExpression_Kind() {}

func (*DerivationExpression_IntervalYear) isDerivationExpression_Kind() {}

func (*DerivationExpression_TimestampTz) isDerivationExpression_Kind() {}

func (*DerivationExpression_Uuid) isDerivationExpression_Kind() {}

func (*DerivationExpression_IntervalDay) isDerivationExpression_Kind() {}

func (*DerivationExpression_IntervalCompound) isDerivationExpression_Kind() {}

func (*DerivationExpression_FixedChar) isDerivationExpression_Kind() {}

func (*DerivationExpression_Varchar) isDerivationExpression_Kind() {}

func (*DerivationExpression_FixedBinary) isDerivationExpression_Kind() {}

func (*DerivationExpression_Decimal) isDerivationExpression_Kind() {}

func (*DerivationExpression_PrecisionTime) isDerivationExpression_Kind() {}

func (*DerivationExpression_PrecisionTimestamp) isDerivationExpression_Kind() {}

func (*DerivationExpression_PrecisionTimestampTz) isDerivationExpression_Kind() {}

func (*DerivationExpression_Struct) isDerivationExpression_Kind() {}

func (*DerivationExpression_List) isDerivationExpression_Kind() {}

func (*DerivationExpression_Map) isDerivationExpression_Kind() {}

func (*DerivationExpression_UserDefined) isDerivationExpression_Kind() {}

func (*DerivationExpression_UserDefinedPointer) isDerivationExpression_Kind() {}

func (*DerivationExpression_TypeParameterName) isDerivationExpression_Kind() {}

func (*DerivationExpression_IntegerParameterName) isDerivationExpression_Kind() {}

func (*DerivationExpression_IntegerLiteral) isDerivationExpression_Kind() {}

func (*DerivationExpression_UnaryOp_) isDerivationExpression_Kind() {}

func (*DerivationExpression_BinaryOp_) isDerivationExpression_Kind() {}

func (*DerivationExpression_IfElse_) isDerivationExpression_Kind() {}

func (*DerivationExpression_ReturnProgram_) isDerivationExpression_Kind() {}

type DerivationExpression_ExpressionFixedChar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length           *DerivationExpression `protobuf:"bytes,1,opt,name=length,proto3" json:"length,omitempty"`
	VariationPointer uint32                `protobuf:"varint,2,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability      `protobuf:"varint,3,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *DerivationExpression_ExpressionFixedChar) Reset() {
	*x = DerivationExpression_ExpressionFixedChar{}
	mi := &file_substrait_type_expressions_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivationExpression_ExpressionFixedChar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationExpression_ExpressionFixedChar) ProtoMessage() {}

func (x *DerivationExpression_ExpressionFixedChar) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_type_expressions_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationExpression_ExpressionFixedChar.ProtoReflect.Descriptor instead.
func (*DerivationExpression_ExpressionFixedChar) Descriptor() ([]byte, []int) {
	return file_substrait_type_expressions_proto_rawDescGZIP(), []int{0, 0}
}

func (x *DerivationExpression_ExpressionFixedChar) GetLength() *DerivationExpression {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *DerivationExpression_ExpressionFixedChar) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *DerivationExpression_ExpressionFixedChar) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type DerivationExpression_ExpressionVarChar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length           *DerivationExpression `protobuf:"bytes,1,opt,name=length,proto3" json:"length,omitempty"`
	VariationPointer uint32                `protobuf:"varint,2,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability      `protobuf:"varint,3,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *DerivationExpression_ExpressionVarChar) Reset() {
	*x = DerivationExpression_ExpressionVarChar{}
	mi := &file_substrait_type_expressions_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivationExpression_ExpressionVarChar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationExpression_ExpressionVarChar) ProtoMessage() {}

func (x *DerivationExpression_ExpressionVarChar) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_type_expressions_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationExpression_ExpressionVarChar.ProtoReflect.Descriptor instead.
func (*DerivationExpression_ExpressionVarChar) Descriptor() ([]byte, []int) {
	return file_substrait_type_expressions_proto_rawDescGZIP(), []int{0, 1}
}

func (x *DerivationExpression_ExpressionVarChar) GetLength() *DerivationExpression {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *DerivationExpression_ExpressionVarChar) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *DerivationExpression_ExpressionVarChar) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type DerivationExpression_ExpressionFixedBinary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length           *DerivationExpression `protobuf:"bytes,1,opt,name=length,proto3" json:"length,omitempty"`
	VariationPointer uint32                `protobuf:"varint,2,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability      `protobuf:"varint,3,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *DerivationExpression_ExpressionFixedBinary) Reset() {
	*x = DerivationExpression_ExpressionFixedBinary{}
	mi := &file_substrait_type_expressions_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivationExpression_ExpressionFixedBinary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationExpression_ExpressionFixedBinary) ProtoMessage() {}

func (x *DerivationExpression_ExpressionFixedBinary) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_type_expressions_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationExpression_ExpressionFixedBinary.ProtoReflect.Descriptor instead.
func (*DerivationExpression_ExpressionFixedBinary) Descriptor() ([]byte, []int) {
	return file_substrait_type_expressions_proto_rawDescGZIP(), []int{0, 2}
}

func (x *DerivationExpression_ExpressionFixedBinary) GetLength() *DerivationExpression {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *DerivationExpression_ExpressionFixedBinary) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *DerivationExpression_ExpressionFixedBinary) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type DerivationExpression_ExpressionDecimal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scale            *DerivationExpression `protobuf:"bytes,1,opt,name=scale,proto3" json:"scale,omitempty"`
	Precision        *DerivationExpression `protobuf:"bytes,2,opt,name=precision,proto3" json:"precision,omitempty"`
	VariationPointer uint32                `protobuf:"varint,3,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability      `protobuf:"varint,4,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *DerivationExpression_ExpressionDecimal) Reset() {
	*x = DerivationExpression_ExpressionDecimal{}
	mi := &file_substrait_type_expressions_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivationExpression_ExpressionDecimal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationExpression_ExpressionDecimal) ProtoMessage() {}

func (x *DerivationExpression_ExpressionDecimal) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_type_expressions_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationExpression_ExpressionDecimal.ProtoReflect.Descriptor instead.
func (*DerivationExpression_ExpressionDecimal) Descriptor() ([]byte, []int) {
	return file_substrait_type_expressions_proto_rawDescGZIP(), []int{0, 3}
}

func (x *DerivationExpression_ExpressionDecimal) GetScale() *DerivationExpression {
	if x != nil {
		return x.Scale
	}
	return nil
}

func (x *DerivationExpression_ExpressionDecimal) GetPrecision() *DerivationExpression {
	if x != nil {
		return x.Precision
	}
	return nil
}

func (x *DerivationExpression_ExpressionDecimal) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *DerivationExpression_ExpressionDecimal) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type DerivationExpression_ExpressionPrecisionTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Precision        *DerivationExpression `protobuf:"bytes,1,opt,name=precision,proto3" json:"precision,omitempty"`
	VariationPointer uint32                `protobuf:"varint,2,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability      `protobuf:"varint,3,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *DerivationExpression_ExpressionPrecisionTime) Reset() {
	*x = DerivationExpression_ExpressionPrecisionTime{}
	mi := &file_substrait_type_expressions_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivationExpression_ExpressionPrecisionTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationExpression_ExpressionPrecisionTime) ProtoMessage() {}

func (x *DerivationExpression_ExpressionPrecisionTime) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_type_expressions_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationExpression_ExpressionPrecisionTime.ProtoReflect.Descriptor instead.
func (*DerivationExpression_ExpressionPrecisionTime) Descriptor() ([]byte, []int) {
	return file_substrait_type_expressions_proto_rawDescGZIP(), []int{0, 4}
}

func (x *DerivationExpression_ExpressionPrecisionTime) GetPrecision() *DerivationExpression {
	if x != nil {
		return x.Precision
	}
	return nil
}

func (x *DerivationExpression_ExpressionPrecisionTime) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *DerivationExpression_ExpressionPrecisionTime) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type DerivationExpression_ExpressionPrecisionTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Precision        *DerivationExpression `protobuf:"bytes,1,opt,name=precision,proto3" json:"precision,omitempty"`
	VariationPointer uint32                `protobuf:"varint,2,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability      `protobuf:"varint,3,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *DerivationExpression_ExpressionPrecisionTimestamp) Reset() {
	*x = DerivationExpression_ExpressionPrecisionTimestamp{}
	mi := &file_substrait_type_expressions_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivationExpression_ExpressionPrecisionTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationExpression_ExpressionPrecisionTimestamp) ProtoMessage() {}

func (x *DerivationExpression_ExpressionPrecisionTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_type_expressions_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationExpression_ExpressionPrecisionTimestamp.ProtoReflect.Descriptor instead.
func (*DerivationExpression_ExpressionPrecisionTimestamp) Descriptor() ([]byte, []int) {
	return file_substrait_type_expressions_proto_rawDescGZIP(), []int{0, 5}
}

func (x *DerivationExpression_ExpressionPrecisionTimestamp) GetPrecision() *DerivationExpression {
	if x != nil {
		return x.Precision
	}
	return nil
}

func (x *DerivationExpression_ExpressionPrecisionTimestamp) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *DerivationExpression_ExpressionPrecisionTimestamp) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type DerivationExpression_ExpressionIntervalDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Precision        *DerivationExpression `protobuf:"bytes,1,opt,name=precision,proto3" json:"precision,omitempty"`
	VariationPointer uint32                `protobuf:"varint,2,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability      `protobuf:"varint,3,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *DerivationExpression_ExpressionIntervalDay) Reset() {
	*x = DerivationExpression_ExpressionIntervalDay{}
	mi := &file_substrait_type_expressions_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivationExpression_ExpressionIntervalDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationExpression_ExpressionIntervalDay) ProtoMessage() {}

func (x *DerivationExpression_ExpressionIntervalDay) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_type_expressions_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationExpression_ExpressionIntervalDay.ProtoReflect.Descriptor instead.
func (*DerivationExpression_ExpressionIntervalDay) Descriptor() ([]byte, []int) {
	return file_substrait_type_expressions_proto_rawDescGZIP(), []int{0, 6}
}

func (x *DerivationExpression_ExpressionIntervalDay) GetPrecision() *DerivationExpression {
	if x != nil {
		return x.Precision
	}
	return nil
}

func (x *DerivationExpression_ExpressionIntervalDay) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *DerivationExpression_ExpressionIntervalDay) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type DerivationExpression_ExpressionIntervalCompound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Precision        *DerivationExpression `protobuf:"bytes,1,opt,name=precision,proto3" json:"precision,omitempty"`
	VariationPointer uint32                `protobuf:"varint,2,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability      `protobuf:"varint,3,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *DerivationExpression_ExpressionIntervalCompound) Reset() {
	*x = DerivationExpression_ExpressionIntervalCompound{}
	mi := &file_substrait_type_expressions_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivationExpression_ExpressionIntervalCompound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationExpression_ExpressionIntervalCompound) ProtoMessage() {}

func (x *DerivationExpression_ExpressionIntervalCompound) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_type_expressions_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationExpression_ExpressionIntervalCompound.ProtoReflect.Descriptor instead.
func (*DerivationExpression_ExpressionIntervalCompound) Descriptor() ([]byte, []int) {
	return file_substrait_type_expressions_proto_rawDescGZIP(), []int{0, 7}
}

func (x *DerivationExpression_ExpressionIntervalCompound) GetPrecision() *DerivationExpression {
	if x != nil {
		return x.Precision
	}
	return nil
}

func (x *DerivationExpression_ExpressionIntervalCompound) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *DerivationExpression_ExpressionIntervalCompound) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type DerivationExpression_ExpressionPrecisionTimestampTZ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Precision        *DerivationExpression `protobuf:"bytes,1,opt,name=precision,proto3" json:"precision,omitempty"`
	VariationPointer uint32                `protobuf:"varint,2,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability      `protobuf:"varint,3,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *DerivationExpression_ExpressionPrecisionTimestampTZ) Reset() {
	*x = DerivationExpression_ExpressionPrecisionTimestampTZ{}
	mi := &file_substrait_type_expressions_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivationExpression_ExpressionPrecisionTimestampTZ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationExpression_ExpressionPrecisionTimestampTZ) ProtoMessage() {}

func (x *DerivationExpression_ExpressionPrecisionTimestampTZ) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_type_expressions_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationExpression_ExpressionPrecisionTimestampTZ.ProtoReflect.Descriptor instead.
func (*DerivationExpression_ExpressionPrecisionTimestampTZ) Descriptor() ([]byte, []int) {
	return file_substrait_type_expressions_proto_rawDescGZIP(), []int{0, 8}
}

func (x *DerivationExpression_ExpressionPrecisionTimestampTZ) GetPrecision() *DerivationExpression {
	if x != nil {
		return x.Precision
	}
	return nil
}

func (x *DerivationExpression_ExpressionPrecisionTimestampTZ) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *DerivationExpression_ExpressionPrecisionTimestampTZ) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type DerivationExpression_ExpressionStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types            []*DerivationExpression `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
	VariationPointer uint32                  `protobuf:"varint,2,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability        `protobuf:"varint,3,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *DerivationExpression_ExpressionStruct) Reset() {
	*x = DerivationExpression_ExpressionStruct{}
	mi := &file_substrait_type_expressions_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivationExpression_ExpressionStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationExpression_ExpressionStruct) ProtoMessage() {}

func (x *DerivationExpression_ExpressionStruct) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_type_expressions_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationExpression_ExpressionStruct.ProtoReflect.Descriptor instead.
func (*DerivationExpression_ExpressionStruct) Descriptor() ([]byte, []int) {
	return file_substrait_type_expressions_proto_rawDescGZIP(), []int{0, 9}
}

func (x *DerivationExpression_ExpressionStruct) GetTypes() []*DerivationExpression {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *DerivationExpression_ExpressionStruct) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *DerivationExpression_ExpressionStruct) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type DerivationExpression_ExpressionNamedStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names  []string                               `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	Struct *DerivationExpression_ExpressionStruct `protobuf:"bytes,2,opt,name=struct,proto3" json:"struct,omitempty"`
}

func (x *DerivationExpression_ExpressionNamedStruct) Reset() {
	*x = DerivationExpression_ExpressionNamedStruct{}
	mi := &file_substrait_type_expressions_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivationExpression_ExpressionNamedStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationExpression_ExpressionNamedStruct) ProtoMessage() {}

func (x *DerivationExpression_ExpressionNamedStruct) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_type_expressions_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationExpression_ExpressionNamedStruct.ProtoReflect.Descriptor instead.
func (*DerivationExpression_ExpressionNamedStruct) Descriptor() ([]byte, []int) {
	return file_substrait_type_expressions_proto_rawDescGZIP(), []int{0, 10}
}

func (x *DerivationExpression_ExpressionNamedStruct) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *DerivationExpression_ExpressionNamedStruct) GetStruct() *DerivationExpression_ExpressionStruct {
	if x != nil {
		return x.Struct
	}
	return nil
}

type DerivationExpression_ExpressionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             *DerivationExpression `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	VariationPointer uint32                `protobuf:"varint,2,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability      `protobuf:"varint,3,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *DerivationExpression_ExpressionList) Reset() {
	*x = DerivationExpression_ExpressionList{}
	mi := &file_substrait_type_expressions_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivationExpression_ExpressionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationExpression_ExpressionList) ProtoMessage() {}

func (x *DerivationExpression_ExpressionList) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_type_expressions_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationExpression_ExpressionList.ProtoReflect.Descriptor instead.
func (*DerivationExpression_ExpressionList) Descriptor() ([]byte, []int) {
	return file_substrait_type_expressions_proto_rawDescGZIP(), []int{0, 11}
}

func (x *DerivationExpression_ExpressionList) GetType() *DerivationExpression {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DerivationExpression_ExpressionList) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *DerivationExpression_ExpressionList) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type DerivationExpression_ExpressionMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key              *DerivationExpression `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value            *DerivationExpression `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	VariationPointer uint32                `protobuf:"varint,3,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability      `protobuf:"varint,4,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *DerivationExpression_ExpressionMap) Reset() {
	*x = DerivationExpression_ExpressionMap{}
	mi := &file_substrait_type_expressions_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivationExpression_ExpressionMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationExpression_ExpressionMap) ProtoMessage() {}

func (x *DerivationExpression_ExpressionMap) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_type_expressions_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationExpression_ExpressionMap.ProtoReflect.Descriptor instead.
func (*DerivationExpression_ExpressionMap) Descriptor() ([]byte, []int) {
	return file_substrait_type_expressions_proto_rawDescGZIP(), []int{0, 12}
}

func (x *DerivationExpression_ExpressionMap) GetKey() *DerivationExpression {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DerivationExpression_ExpressionMap) GetValue() *DerivationExpression {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DerivationExpression_ExpressionMap) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *DerivationExpression_ExpressionMap) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type DerivationExpression_ExpressionUserDefined struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypePointer      uint32           `protobuf:"varint,1,opt,name=type_pointer,json=typePointer,proto3" json:"type_pointer,omitempty"`
	VariationPointer uint32           `protobuf:"varint,2,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability `protobuf:"varint,3,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *DerivationExpression_ExpressionUserDefined) Reset() {
	*x = DerivationExpression_ExpressionUserDefined{}
	mi := &file_substrait_type_expressions_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivationExpression_ExpressionUserDefined) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationExpression_ExpressionUserDefined) ProtoMessage() {}

func (x *DerivationExpression_ExpressionUserDefined) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_type_expressions_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationExpression_ExpressionUserDefined.ProtoReflect.Descriptor instead.
func (*DerivationExpression_ExpressionUserDefined) Descriptor() ([]byte, []int) {
	return file_substrait_type_expressions_proto_rawDescGZIP(), []int{0, 13}
}

func (x *DerivationExpression_ExpressionUserDefined) GetTypePointer() uint32 {
	if x != nil {
		return x.TypePointer
	}
	return 0
}

func (x *DerivationExpression_ExpressionUserDefined) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *DerivationExpression_ExpressionUserDefined) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type DerivationExpression_IfElse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IfCondition *DerivationExpression `protobuf:"bytes,1,opt,name=if_condition,json=ifCondition,proto3" json:"if_condition,omitempty"`
	IfReturn    *DerivationExpression `protobuf:"bytes,2,opt,name=if_return,json=ifReturn,proto3" json:"if_return,omitempty"`
	ElseReturn  *DerivationExpression `protobuf:"bytes,3,opt,name=else_return,json=elseReturn,proto3" json:"else_return,omitempty"`
}

func (x *DerivationExpression_IfElse) Reset() {
	*x = DerivationExpression_IfElse{}
	mi := &file_substrait_type_expressions_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivationExpression_IfElse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationExpression_IfElse) ProtoMessage() {}

func (x *DerivationExpression_IfElse) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_type_expressions_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationExpression_IfElse.ProtoReflect.Descriptor instead.
func (*DerivationExpression_IfElse) Descriptor() ([]byte, []int) {
	return file_substrait_type_expressions_proto_rawDescGZIP(), []int{0, 14}
}

func (x *DerivationExpression_IfElse) GetIfCondition() *DerivationExpression {
	if x != nil {
		return x.IfCondition
	}
	return nil
}

func (x *DerivationExpression_IfElse) GetIfReturn() *DerivationExpression {
	if x != nil {
		return x.IfReturn
	}
	return nil
}

func (x *DerivationExpression_IfElse) GetElseReturn() *DerivationExpression {
	if x != nil {
		return x.ElseReturn
	}
	return nil
}

type DerivationExpression_UnaryOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpType DerivationExpression_UnaryOp_UnaryOpType `protobuf:"varint,1,opt,name=op_type,json=opType,proto3,enum=substrait.DerivationExpression_UnaryOp_UnaryOpType" json:"op_type,omitempty"`
	Arg    *DerivationExpression                    `protobuf:"bytes,2,opt,name=arg,proto3" json:"arg,omitempty"`
}

func (x *DerivationExpression_UnaryOp) Reset() {
	*x = DerivationExpression_UnaryOp{}
	mi := &file_substrait_type_expressions_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivationExpression_UnaryOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationExpression_UnaryOp) ProtoMessage() {}

func (x *DerivationExpression_UnaryOp) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_type_expressions_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationExpression_UnaryOp.ProtoReflect.Descriptor instead.
func (*DerivationExpression_UnaryOp) Descriptor() ([]byte, []int) {
	return file_substrait_type_expressions_proto_rawDescGZIP(), []int{0, 15}
}

func (x *DerivationExpression_UnaryOp) GetOpType() DerivationExpression_UnaryOp_UnaryOpType {
	if x != nil {
		return x.OpType
	}
	return DerivationExpression_UnaryOp_UNARY_OP_TYPE_UNSPECIFIED
}

func (x *DerivationExpression_UnaryOp) GetArg() *DerivationExpression {
	if x != nil {
		return x.Arg
	}
	return nil
}

type DerivationExpression_BinaryOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpType DerivationExpression_BinaryOp_BinaryOpType `protobuf:"varint,1,opt,name=op_type,json=opType,proto3,enum=substrait.DerivationExpression_BinaryOp_BinaryOpType" json:"op_type,omitempty"`
	Arg1   *DerivationExpression                      `protobuf:"bytes,2,opt,name=arg1,proto3" json:"arg1,omitempty"`
	Arg2   *DerivationExpression                      `protobuf:"bytes,3,opt,name=arg2,proto3" json:"arg2,omitempty"`
}

func (x *DerivationExpression_BinaryOp) Reset() {
	*x = DerivationExpression_BinaryOp{}
	mi := &file_substrait_type_expressions_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivationExpression_BinaryOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationExpression_BinaryOp) ProtoMessage() {}

func (x *DerivationExpression_BinaryOp) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_type_expressions_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationExpression_BinaryOp.ProtoReflect.Descriptor instead.
func (*DerivationExpression_BinaryOp) Descriptor() ([]byte, []int) {
	return file_substrait_type_expressions_proto_rawDescGZIP(), []int{0, 16}
}

func (x *DerivationExpression_BinaryOp) GetOpType() DerivationExpression_BinaryOp_BinaryOpType {
	if x != nil {
		return x.OpType
	}
	return DerivationExpression_BinaryOp_BINARY_OP_TYPE_UNSPECIFIED
}

func (x *DerivationExpression_BinaryOp) GetArg1() *DerivationExpression {
	if x != nil {
		return x.Arg1
	}
	return nil
}

func (x *DerivationExpression_BinaryOp) GetArg2() *DerivationExpression {
	if x != nil {
		return x.Arg2
	}
	return nil
}

type DerivationExpression_ReturnProgram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assignments     []*DerivationExpression_ReturnProgram_Assignment `protobuf:"bytes,1,rep,name=assignments,proto3" json:"assignments,omitempty"`
	FinalExpression *DerivationExpression                            `protobuf:"bytes,2,opt,name=final_expression,json=finalExpression,proto3" json:"final_expression,omitempty"`
}

func (x *DerivationExpression_ReturnProgram) Reset() {
	*x = DerivationExpression_ReturnProgram{}
	mi := &file_substrait_type_expressions_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivationExpression_ReturnProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationExpression_ReturnProgram) ProtoMessage() {}

func (x *DerivationExpression_ReturnProgram) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_type_expressions_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationExpression_ReturnProgram.ProtoReflect.Descriptor instead.
func (*DerivationExpression_ReturnProgram) Descriptor() ([]byte, []int) {
	return file_substrait_type_expressions_proto_rawDescGZIP(), []int{0, 17}
}

func (x *DerivationExpression_ReturnProgram) GetAssignments() []*DerivationExpression_ReturnProgram_Assignment {
	if x != nil {
		return x.Assignments
	}
	return nil
}

func (x *DerivationExpression_ReturnProgram) GetFinalExpression() *DerivationExpression {
	if x != nil {
		return x.FinalExpression
	}
	return nil
}

type DerivationExpression_ReturnProgram_Assignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Expression *DerivationExpression `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *DerivationExpression_ReturnProgram_Assignment) Reset() {
	*x = DerivationExpression_ReturnProgram_Assignment{}
	mi := &file_substrait_type_expressions_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivationExpression_ReturnProgram_Assignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivationExpression_ReturnProgram_Assignment) ProtoMessage() {}

func (x *DerivationExpression_ReturnProgram_Assignment) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_type_expressions_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivationExpression_ReturnProgram_Assignment.ProtoReflect.Descriptor instead.
func (*DerivationExpression_ReturnProgram_Assignment) Descriptor() ([]byte, []int) {
	return file_substrait_type_expressions_proto_rawDescGZIP(), []int{0, 17, 0}
}

func (x *DerivationExpression_ReturnProgram_Assignment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DerivationExpression_ReturnProgram_Assignment) GetExpression() *DerivationExpression {
	if x != nil {
		return x.Expression
	}
	return nil
}

var File_substrait_type_expressions_proto protoreflect.FileDescriptor

var file_substrait_type_expressions_proto_rawDesc = []byte{
	0x0a, 0x20, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x1a, 0x14, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x98, 0x32, 0x0a, 0x14, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04,
	0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x02, 0x69,
	0x38, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x38, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x38, 0x12, 0x27, 0x0a, 0x03, 0x69, 0x31, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x49, 0x31, 0x36, 0x48, 0x00, 0x52, 0x03, 0x69, 0x31, 0x36, 0x12, 0x27, 0x0a, 0x03, 0x69, 0x33,
	0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x33, 0x32, 0x48, 0x00, 0x52, 0x03,
	0x69, 0x33, 0x32, 0x12, 0x27, 0x0a, 0x03, 0x69, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x49, 0x36, 0x34, 0x48, 0x00, 0x52, 0x03, 0x69, 0x36, 0x34, 0x12, 0x2a, 0x0a, 0x04,
	0x66, 0x70, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x50, 0x33, 0x32,
	0x48, 0x00, 0x52, 0x04, 0x66, 0x70, 0x33, 0x32, 0x12, 0x2a, 0x0a, 0x04, 0x66, 0x70, 0x36, 0x34,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x50, 0x36, 0x34, 0x48, 0x00, 0x52, 0x04,
	0x66, 0x70, 0x36, 0x34, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x79, 0x65, 0x61, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x12, 0x44, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x7a, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x5a, 0x42, 0x02, 0x18, 0x01, 0x48,
	0x00, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x7a, 0x12, 0x2a,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x48, 0x00, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x0c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x12, 0x69, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52,
	0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x54, 0x0a, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x12, 0x4d, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x63, 0x68,
	0x61, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x48, 0x00, 0x52, 0x07, 0x76,
	0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x12, 0x5a, 0x0a, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x12, 0x4d, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e,
	0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x12, 0x60, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x6f, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00,
	0x52, 0x12, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x76, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x7a, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x54, 0x5a, 0x48, 0x00, 0x52, 0x14, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x7a, 0x12, 0x4a, 0x0a, 0x06,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61,
	0x70, 0x12, 0x5a, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x36, 0x0a,
	0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x48,
	0x00, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x74, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x08, 0x75, 0x6e,
	0x61, 0x72, 0x79, 0x5f, 0x6f, 0x70, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x6e,
	0x61, 0x72, 0x79, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70,
	0x12, 0x47, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6f, 0x70, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e,
	0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x48, 0x00, 0x52,
	0x08, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x12, 0x41, 0x0a, 0x07, 0x69, 0x66, 0x5f,
	0x65, 0x6c, 0x73, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x66, 0x45, 0x6c,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x69, 0x66, 0x45, 0x6c, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0e,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x1a, 0xba, 0x01, 0x0a, 0x13, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x12, 0x37, 0x0a, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x1a, 0xb8, 0x01, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x12, 0x37, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a,
	0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xbc, 0x01, 0x0a,
	0x15, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x2b, 0x0a, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b,
	0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b,
	0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xf5, 0x01, 0x0a, 0x11,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x1a, 0xc4, 0x01, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44,
	0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x6e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x6e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xc9, 0x01, 0x0a, 0x1c, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3d, 0x0a, 0x09, 0x70,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xc2, 0x01, 0x0a, 0x15, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79,
	0x12, 0x3d, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e,
	0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b,
	0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b,
	0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xc7, 0x01, 0x0a, 0x1a,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xcb, 0x01, 0x0a, 0x1e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x5a, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x1a, 0xb5, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b,
	0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b,
	0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x77, 0x0a, 0x15, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x1a, 0xb1, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x75, 0x6c,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x6e, 0x75, 0x6c,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xe5, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x31, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x1a, 0xa6, 0x01, 0x0a, 0x15, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x6e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xcc, 0x01, 0x0a, 0x06, 0x49, 0x66,
	0x45, 0x6c, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x69, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x66, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x69, 0x66, 0x5f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x66,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x65, 0x6c, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x6c,
	0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x1a, 0xd7, 0x01, 0x0a, 0x07, 0x55, 0x6e, 0x61,
	0x72, 0x79, 0x4f, 0x70, 0x12, 0x4c, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x2e, 0x55,
	0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x03, 0x61, 0x72, 0x67, 0x22, 0x4b, 0x0a, 0x0b, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4f, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x4e, 0x4f, 0x54,
	0x10, 0x01, 0x1a, 0xb4, 0x04, 0x0a, 0x08, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x12,
	0x4e, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x35, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x33, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x31, 0x12, 0x33, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x32, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44,
	0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x72, 0x67, 0x32, 0x22, 0xed, 0x02, 0x0a, 0x0c, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x49,
	0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x49,
	0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x55,
	0x53, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4f, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x10, 0x02, 0x12, 0x1b, 0x0a,
	0x17, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x49,
	0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x56,
	0x49, 0x44, 0x45, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f,
	0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x05, 0x12, 0x16, 0x0a,
	0x12, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x58, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f,
	0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f,
	0x54, 0x48, 0x41, 0x4e, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59,
	0x5f, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48,
	0x41, 0x4e, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4f,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11,
	0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x52, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4f, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x0b, 0x12, 0x19,
	0x0a, 0x15, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x53, 0x10, 0x0c, 0x1a, 0x9a, 0x02, 0x0a, 0x0d, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x5a, 0x0a, 0x0b, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x1a, 0x61, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x42, 0x66,
	0x0a, 0x12, 0x69, 0x6f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2d, 0x69, 0x6f, 0x2f,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x70,
	0x62, 0xaa, 0x02, 0x12, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_substrait_type_expressions_proto_rawDescOnce sync.Once
	file_substrait_type_expressions_proto_rawDescData = file_substrait_type_expressions_proto_rawDesc
)

func file_substrait_type_expressions_proto_rawDescGZIP() []byte {
	file_substrait_type_expressions_proto_rawDescOnce.Do(func() {
		file_substrait_type_expressions_proto_rawDescData = protoimpl.X.CompressGZIP(file_substrait_type_expressions_proto_rawDescData)
	})
	return file_substrait_type_expressions_proto_rawDescData
}

var file_substrait_type_expressions_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_substrait_type_expressions_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_substrait_type_expressions_proto_goTypes = []any{
	(DerivationExpression_UnaryOp_UnaryOpType)(0),               // 0: substrait.DerivationExpression.UnaryOp.UnaryOpType
	(DerivationExpression_BinaryOp_BinaryOpType)(0),             // 1: substrait.DerivationExpression.BinaryOp.BinaryOpType
	(*DerivationExpression)(nil),                                // 2: substrait.DerivationExpression
	(*DerivationExpression_ExpressionFixedChar)(nil),            // 3: substrait.DerivationExpression.ExpressionFixedChar
	(*DerivationExpression_ExpressionVarChar)(nil),              // 4: substrait.DerivationExpression.ExpressionVarChar
	(*DerivationExpression_ExpressionFixedBinary)(nil),          // 5: substrait.DerivationExpression.ExpressionFixedBinary
	(*DerivationExpression_ExpressionDecimal)(nil),              // 6: substrait.DerivationExpression.ExpressionDecimal
	(*DerivationExpression_ExpressionPrecisionTime)(nil),        // 7: substrait.DerivationExpression.ExpressionPrecisionTime
	(*DerivationExpression_ExpressionPrecisionTimestamp)(nil),   // 8: substrait.DerivationExpression.ExpressionPrecisionTimestamp
	(*DerivationExpression_ExpressionIntervalDay)(nil),          // 9: substrait.DerivationExpression.ExpressionIntervalDay
	(*DerivationExpression_ExpressionIntervalCompound)(nil),     // 10: substrait.DerivationExpression.ExpressionIntervalCompound
	(*DerivationExpression_ExpressionPrecisionTimestampTZ)(nil), // 11: substrait.DerivationExpression.ExpressionPrecisionTimestampTZ
	(*DerivationExpression_ExpressionStruct)(nil),               // 12: substrait.DerivationExpression.ExpressionStruct
	(*DerivationExpression_ExpressionNamedStruct)(nil),          // 13: substrait.DerivationExpression.ExpressionNamedStruct
	(*DerivationExpression_ExpressionList)(nil),                 // 14: substrait.DerivationExpression.ExpressionList
	(*DerivationExpression_ExpressionMap)(nil),                  // 15: substrait.DerivationExpression.ExpressionMap
	(*DerivationExpression_ExpressionUserDefined)(nil),          // 16: substrait.DerivationExpression.ExpressionUserDefined
	(*DerivationExpression_IfElse)(nil),                         // 17: substrait.DerivationExpression.IfElse
	(*DerivationExpression_UnaryOp)(nil),                        // 18: substrait.DerivationExpression.UnaryOp
	(*DerivationExpression_BinaryOp)(nil),                       // 19: substrait.DerivationExpression.BinaryOp
	(*DerivationExpression_ReturnProgram)(nil),                  // 20: substrait.DerivationExpression.ReturnProgram
	(*DerivationExpression_ReturnProgram_Assignment)(nil),       // 21: substrait.DerivationExpression.ReturnProgram.Assignment
	(*Type_Boolean)(nil),                                        // 22: substrait.Type.Boolean
	(*Type_I8)(nil),                                             // 23: substrait.Type.I8
	(*Type_I16)(nil),                                            // 24: substrait.Type.I16
	(*Type_I32)(nil),                                            // 25: substrait.Type.I32
	(*Type_I64)(nil),                                            // 26: substrait.Type.I64
	(*Type_FP32)(nil),                                           // 27: substrait.Type.FP32
	(*Type_FP64)(nil),                                           // 28: substrait.Type.FP64
	(*Type_String)(nil),                                         // 29: substrait.Type.String
	(*Type_Binary)(nil),                                         // 30: substrait.Type.Binary
	(*Type_Timestamp)(nil),                                      // 31: substrait.Type.Timestamp
	(*Type_Date)(nil),                                           // 32: substrait.Type.Date
	(*Type_Time)(nil),                                           // 33: substrait.Type.Time
	(*Type_IntervalYear)(nil),                                   // 34: substrait.Type.IntervalYear
	(*Type_TimestampTZ)(nil),                                    // 35: substrait.Type.TimestampTZ
	(*Type_UUID)(nil),                                           // 36: substrait.Type.UUID
	(Type_Nullability)(0),                                       // 37: substrait.Type.Nullability
}
var file_substrait_type_expressions_proto_depIdxs = []int32{
	22, // 0: substrait.DerivationExpression.bool:type_name -> substrait.Type.Boolean
	23, // 1: substrait.DerivationExpression.i8:type_name -> substrait.Type.I8
	24, // 2: substrait.DerivationExpression.i16:type_name -> substrait.Type.I16
	25, // 3: substrait.DerivationExpression.i32:type_name -> substrait.Type.I32
	26, // 4: substrait.DerivationExpression.i64:type_name -> substrait.Type.I64
	27, // 5: substrait.DerivationExpression.fp32:type_name -> substrait.Type.FP32
	28, // 6: substrait.DerivationExpression.fp64:type_name -> substrait.Type.FP64
	29, // 7: substrait.DerivationExpression.string:type_name -> substrait.Type.String
	30, // 8: substrait.DerivationExpression.binary:type_name -> substrait.Type.Binary
	31, // 9: substrait.DerivationExpression.timestamp:type_name -> substrait.Type.Timestamp
	32, // 10: substrait.DerivationExpression.date:type_name -> substrait.Type.Date
	33, // 11: substrait.DerivationExpression.time:type_name -> substrait.Type.Time
	34, // 12: substrait.DerivationExpression.interval_year:type_name -> substrait.Type.IntervalYear
	35, // 13: substrait.DerivationExpression.timestamp_tz:type_name -> substrait.Type.TimestampTZ
	36, // 14: substrait.DerivationExpression.uuid:type_name -> substrait.Type.UUID
	9,  // 15: substrait.DerivationExpression.interval_day:type_name -> substrait.DerivationExpression.ExpressionIntervalDay
	10, // 16: substrait.DerivationExpression.interval_compound:type_name -> substrait.DerivationExpression.ExpressionIntervalCompound
	3,  // 17: substrait.DerivationExpression.fixed_char:type_name -> substrait.DerivationExpression.ExpressionFixedChar
	4,  // 18: substrait.DerivationExpression.varchar:type_name -> substrait.DerivationExpression.ExpressionVarChar
	5,  // 19: substrait.DerivationExpression.fixed_binary:type_name -> substrait.DerivationExpression.ExpressionFixedBinary
	6,  // 20: substrait.DerivationExpression.decimal:type_name -> substrait.DerivationExpression.ExpressionDecimal
	7,  // 21: substrait.DerivationExpression.precision_time:type_name -> substrait.DerivationExpression.ExpressionPrecisionTime
	8,  // 22: substrait.DerivationExpression.precision_timestamp:type_name -> substrait.DerivationExpression.ExpressionPrecisionTimestamp
	11, // 23: substrait.DerivationExpression.precision_timestamp_tz:type_name -> substrait.DerivationExpression.ExpressionPrecisionTimestampTZ
	12, // 24: substrait.DerivationExpression.struct:type_name -> substrait.DerivationExpression.ExpressionStruct
	14, // 25: substrait.DerivationExpression.list:type_name -> substrait.DerivationExpression.ExpressionList
	15, // 26: substrait.DerivationExpression.map:type_name -> substrait.DerivationExpression.ExpressionMap
	16, // 27: substrait.DerivationExpression.user_defined:type_name -> substrait.DerivationExpression.ExpressionUserDefined
	18, // 28: substrait.DerivationExpression.unary_op:type_name -> substrait.DerivationExpression.UnaryOp
	19, // 29: substrait.DerivationExpression.binary_op:type_name -> substrait.DerivationExpression.BinaryOp
	17, // 30: substrait.DerivationExpression.if_else:type_name -> substrait.DerivationExpression.IfElse
	20, // 31: substrait.DerivationExpression.return_program:type_name -> substrait.DerivationExpression.ReturnProgram
	2,  // 32: substrait.DerivationExpression.ExpressionFixedChar.length:type_name -> substrait.DerivationExpression
	37, // 33: substrait.DerivationExpression.ExpressionFixedChar.nullability:type_name -> substrait.Type.Nullability
	2,  // 34: substrait.DerivationExpression.ExpressionVarChar.length:type_name -> substrait.DerivationExpression
	37, // 35: substrait.DerivationExpression.ExpressionVarChar.nullability:type_name -> substrait.Type.Nullability
	2,  // 36: substrait.DerivationExpression.ExpressionFixedBinary.length:type_name -> substrait.DerivationExpression
	37, // 37: substrait.DerivationExpression.ExpressionFixedBinary.nullability:type_name -> substrait.Type.Nullability
	2,  // 38: substrait.DerivationExpression.ExpressionDecimal.scale:type_name -> substrait.DerivationExpression
	2,  // 39: substrait.DerivationExpression.ExpressionDecimal.precision:type_name -> substrait.DerivationExpression
	37, // 40: substrait.DerivationExpression.ExpressionDecimal.nullability:type_name -> substrait.Type.Nullability
	2,  // 41: substrait.DerivationExpression.ExpressionPrecisionTime.precision:type_name -> substrait.DerivationExpression
	37, // 42: substrait.DerivationExpression.ExpressionPrecisionTime.nullability:type_name -> substrait.Type.Nullability
	2,  // 43: substrait.DerivationExpression.ExpressionPrecisionTimestamp.precision:type_name -> substrait.DerivationExpression
	37, // 44: substrait.DerivationExpression.ExpressionPrecisionTimestamp.nullability:type_name -> substrait.Type.Nullability
	2,  // 45: substrait.DerivationExpression.ExpressionIntervalDay.precision:type_name -> substrait.DerivationExpression
	37, // 46: substrait.DerivationExpression.ExpressionIntervalDay.nullability:type_name -> substrait.Type.Nullability
	2,  // 47: substrait.DerivationExpression.ExpressionIntervalCompound.precision:type_name -> substrait.DerivationExpression
	37, // 48: substrait.DerivationExpression.ExpressionIntervalCompound.nullability:type_name -> substrait.Type.Nullability
	2,  // 49: substrait.DerivationExpression.ExpressionPrecisionTimestampTZ.precision:type_name -> substrait.DerivationExpression
	37, // 50: substrait.DerivationExpression.ExpressionPrecisionTimestampTZ.nullability:type_name -> substrait.Type.Nullability
	2,  // 51: substrait.DerivationExpression.ExpressionStruct.types:type_name -> substrait.DerivationExpression
	37, // 52: substrait.DerivationExpression.ExpressionStruct.nullability:type_name -> substrait.Type.Nullability
	12, // 53: substrait.DerivationExpression.ExpressionNamedStruct.struct:type_name -> substrait.DerivationExpression.ExpressionStruct
	2,  // 54: substrait.DerivationExpression.ExpressionList.type:type_name -> substrait.DerivationExpression
	37, // 55: substrait.DerivationExpression.ExpressionList.nullability:type_name -> substrait.Type.Nullability
	2,  // 56: substrait.DerivationExpression.ExpressionMap.key:type_name -> substrait.DerivationExpression
	2,  // 57: substrait.DerivationExpression.ExpressionMap.value:type_name -> substrait.DerivationExpression
	37, // 58: substrait.DerivationExpression.ExpressionMap.nullability:type_name -> substrait.Type.Nullability
	37, // 59: substrait.DerivationExpression.ExpressionUserDefined.nullability:type_name -> substrait.Type.Nullability
	2,  // 60: substrait.DerivationExpression.IfElse.if_condition:type_name -> substrait.DerivationExpression
	2,  // 61: substrait.DerivationExpression.IfElse.if_return:type_name -> substrait.DerivationExpression
	2,  // 62: substrait.DerivationExpression.IfElse.else_return:type_name -> substrait.DerivationExpression
	0,  // 63: substrait.DerivationExpression.UnaryOp.op_type:type_name -> substrait.DerivationExpression.UnaryOp.UnaryOpType
	2,  // 64: substrait.DerivationExpression.UnaryOp.arg:type_name -> substrait.DerivationExpression
	1,  // 65: substrait.DerivationExpression.BinaryOp.op_type:type_name -> substrait.DerivationExpression.BinaryOp.BinaryOpType
	2,  // 66: substrait.DerivationExpression.BinaryOp.arg1:type_name -> substrait.DerivationExpression
	2,  // 67: substrait.DerivationExpression.BinaryOp.arg2:type_name -> substrait.DerivationExpression
	21, // 68: substrait.DerivationExpression.ReturnProgram.assignments:type_name -> substrait.DerivationExpression.ReturnProgram.Assignment
	2,  // 69: substrait.DerivationExpression.ReturnProgram.final_expression:type_name -> substrait.DerivationExpression
	2,  // 70: substrait.DerivationExpression.ReturnProgram.Assignment.expression:type_name -> substrait.DerivationExpression
	71, // [71:71] is the sub-list for method output_type
	71, // [71:71] is the sub-list for method input_type
	71, // [71:71] is the sub-list for extension type_name
	71, // [71:71] is the sub-list for extension extendee
	0,  // [0:71] is the sub-list for field type_name
}

func init() { file_substrait_type_expressions_proto_init() }
func file_substrait_type_expressions_proto_init() {
	if File_substrait_type_expressions_proto != nil {
		return
	}
	file_substrait_type_proto_init()
	file_substrait_type_expressions_proto_msgTypes[0].OneofWrappers = []any{
		(*DerivationExpression_Bool)(nil),
		(*DerivationExpression_I8)(nil),
		(*DerivationExpression_I16)(nil),
		(*DerivationExpression_I32)(nil),
		(*DerivationExpression_I64)(nil),
		(*DerivationExpression_Fp32)(nil),
		(*DerivationExpression_Fp64)(nil),
		(*DerivationExpression_String_)(nil),
		(*DerivationExpression_Binary)(nil),
		(*DerivationExpression_Timestamp)(nil),
		(*DerivationExpression_Date)(nil),
		(*DerivationExpression_Time)(nil),
		(*DerivationExpression_IntervalYear)(nil),
		(*DerivationExpression_TimestampTz)(nil),
		(*DerivationExpression_Uuid)(nil),
		(*DerivationExpression_IntervalDay)(nil),
		(*DerivationExpression_IntervalCompound)(nil),
		(*DerivationExpression_FixedChar)(nil),
		(*DerivationExpression_Varchar)(nil),
		(*DerivationExpression_FixedBinary)(nil),
		(*DerivationExpression_Decimal)(nil),
		(*DerivationExpression_PrecisionTime)(nil),
		(*DerivationExpression_PrecisionTimestamp)(nil),
		(*DerivationExpression_PrecisionTimestampTz)(nil),
		(*DerivationExpression_Struct)(nil),
		(*DerivationExpression_List)(nil),
		(*DerivationExpression_Map)(nil),
		(*DerivationExpression_UserDefined)(nil),
		(*DerivationExpression_UserDefinedPointer)(nil),
		(*DerivationExpression_TypeParameterName)(nil),
		(*DerivationExpression_IntegerParameterName)(nil),
		(*DerivationExpression_IntegerLiteral)(nil),
		(*DerivationExpression_UnaryOp_)(nil),
		(*DerivationExpression_BinaryOp_)(nil),
		(*DerivationExpression_IfElse_)(nil),
		(*DerivationExpression_ReturnProgram_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_substrait_type_expressions_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_substrait_type_expressions_proto_goTypes,
		DependencyIndexes: file_substrait_type_expressions_proto_depIdxs,
		EnumInfos:         file_substrait_type_expressions_proto_enumTypes,
		MessageInfos:      file_substrait_type_expressions_proto_msgTypes,
	}.Build()
	File_substrait_type_expressions_proto = out.File
	file_substrait_type_expressions_proto_rawDesc = nil
	file_substrait_type_expressions_proto_goTypes = nil
	file_substrait_type_expressions_proto_depIdxs = nil
}
