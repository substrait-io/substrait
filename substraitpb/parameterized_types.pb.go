// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.3
// source: substrait/parameterized_types.proto

package substraitpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ParameterizedType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*ParameterizedType_Bool
	//	*ParameterizedType_I8
	//	*ParameterizedType_I16
	//	*ParameterizedType_I32
	//	*ParameterizedType_I64
	//	*ParameterizedType_Fp32
	//	*ParameterizedType_Fp64
	//	*ParameterizedType_String_
	//	*ParameterizedType_Binary
	//	*ParameterizedType_Timestamp
	//	*ParameterizedType_Date
	//	*ParameterizedType_Time
	//	*ParameterizedType_IntervalYear
	//	*ParameterizedType_IntervalDay
	//	*ParameterizedType_IntervalCompound
	//	*ParameterizedType_TimestampTz
	//	*ParameterizedType_Uuid
	//	*ParameterizedType_FixedChar
	//	*ParameterizedType_Varchar
	//	*ParameterizedType_FixedBinary
	//	*ParameterizedType_Decimal
	//	*ParameterizedType_PrecisionTime
	//	*ParameterizedType_PrecisionTimestamp
	//	*ParameterizedType_PrecisionTimestampTz
	//	*ParameterizedType_Struct
	//	*ParameterizedType_List
	//	*ParameterizedType_Map
	//	*ParameterizedType_UserDefined
	//	*ParameterizedType_UserDefinedPointer
	//	*ParameterizedType_TypeParameter_
	Kind isParameterizedType_Kind `protobuf_oneof:"kind"`
}

func (x *ParameterizedType) Reset() {
	*x = ParameterizedType{}
	mi := &file_substrait_parameterized_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterizedType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterizedType) ProtoMessage() {}

func (x *ParameterizedType) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_parameterized_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterizedType.ProtoReflect.Descriptor instead.
func (*ParameterizedType) Descriptor() ([]byte, []int) {
	return file_substrait_parameterized_types_proto_rawDescGZIP(), []int{0}
}

func (m *ParameterizedType) GetKind() isParameterizedType_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *ParameterizedType) GetBool() *Type_Boolean {
	if x, ok := x.GetKind().(*ParameterizedType_Bool); ok {
		return x.Bool
	}
	return nil
}

func (x *ParameterizedType) GetI8() *Type_I8 {
	if x, ok := x.GetKind().(*ParameterizedType_I8); ok {
		return x.I8
	}
	return nil
}

func (x *ParameterizedType) GetI16() *Type_I16 {
	if x, ok := x.GetKind().(*ParameterizedType_I16); ok {
		return x.I16
	}
	return nil
}

func (x *ParameterizedType) GetI32() *Type_I32 {
	if x, ok := x.GetKind().(*ParameterizedType_I32); ok {
		return x.I32
	}
	return nil
}

func (x *ParameterizedType) GetI64() *Type_I64 {
	if x, ok := x.GetKind().(*ParameterizedType_I64); ok {
		return x.I64
	}
	return nil
}

func (x *ParameterizedType) GetFp32() *Type_FP32 {
	if x, ok := x.GetKind().(*ParameterizedType_Fp32); ok {
		return x.Fp32
	}
	return nil
}

func (x *ParameterizedType) GetFp64() *Type_FP64 {
	if x, ok := x.GetKind().(*ParameterizedType_Fp64); ok {
		return x.Fp64
	}
	return nil
}

func (x *ParameterizedType) GetString_() *Type_String {
	if x, ok := x.GetKind().(*ParameterizedType_String_); ok {
		return x.String_
	}
	return nil
}

func (x *ParameterizedType) GetBinary() *Type_Binary {
	if x, ok := x.GetKind().(*ParameterizedType_Binary); ok {
		return x.Binary
	}
	return nil
}

// Deprecated: Marked as deprecated in substrait/parameterized_types.proto.
func (x *ParameterizedType) GetTimestamp() *Type_Timestamp {
	if x, ok := x.GetKind().(*ParameterizedType_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *ParameterizedType) GetDate() *Type_Date {
	if x, ok := x.GetKind().(*ParameterizedType_Date); ok {
		return x.Date
	}
	return nil
}

// Deprecated: Marked as deprecated in substrait/parameterized_types.proto.
func (x *ParameterizedType) GetTime() *Type_Time {
	if x, ok := x.GetKind().(*ParameterizedType_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ParameterizedType) GetIntervalYear() *Type_IntervalYear {
	if x, ok := x.GetKind().(*ParameterizedType_IntervalYear); ok {
		return x.IntervalYear
	}
	return nil
}

func (x *ParameterizedType) GetIntervalDay() *ParameterizedType_ParameterizedIntervalDay {
	if x, ok := x.GetKind().(*ParameterizedType_IntervalDay); ok {
		return x.IntervalDay
	}
	return nil
}

func (x *ParameterizedType) GetIntervalCompound() *ParameterizedType_ParameterizedIntervalCompound {
	if x, ok := x.GetKind().(*ParameterizedType_IntervalCompound); ok {
		return x.IntervalCompound
	}
	return nil
}

// Deprecated: Marked as deprecated in substrait/parameterized_types.proto.
func (x *ParameterizedType) GetTimestampTz() *Type_TimestampTZ {
	if x, ok := x.GetKind().(*ParameterizedType_TimestampTz); ok {
		return x.TimestampTz
	}
	return nil
}

func (x *ParameterizedType) GetUuid() *Type_UUID {
	if x, ok := x.GetKind().(*ParameterizedType_Uuid); ok {
		return x.Uuid
	}
	return nil
}

func (x *ParameterizedType) GetFixedChar() *ParameterizedType_ParameterizedFixedChar {
	if x, ok := x.GetKind().(*ParameterizedType_FixedChar); ok {
		return x.FixedChar
	}
	return nil
}

func (x *ParameterizedType) GetVarchar() *ParameterizedType_ParameterizedVarChar {
	if x, ok := x.GetKind().(*ParameterizedType_Varchar); ok {
		return x.Varchar
	}
	return nil
}

func (x *ParameterizedType) GetFixedBinary() *ParameterizedType_ParameterizedFixedBinary {
	if x, ok := x.GetKind().(*ParameterizedType_FixedBinary); ok {
		return x.FixedBinary
	}
	return nil
}

func (x *ParameterizedType) GetDecimal() *ParameterizedType_ParameterizedDecimal {
	if x, ok := x.GetKind().(*ParameterizedType_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ParameterizedType) GetPrecisionTime() *ParameterizedType_ParameterizedPrecisionTime {
	if x, ok := x.GetKind().(*ParameterizedType_PrecisionTime); ok {
		return x.PrecisionTime
	}
	return nil
}

func (x *ParameterizedType) GetPrecisionTimestamp() *ParameterizedType_ParameterizedPrecisionTimestamp {
	if x, ok := x.GetKind().(*ParameterizedType_PrecisionTimestamp); ok {
		return x.PrecisionTimestamp
	}
	return nil
}

func (x *ParameterizedType) GetPrecisionTimestampTz() *ParameterizedType_ParameterizedPrecisionTimestampTZ {
	if x, ok := x.GetKind().(*ParameterizedType_PrecisionTimestampTz); ok {
		return x.PrecisionTimestampTz
	}
	return nil
}

func (x *ParameterizedType) GetStruct() *ParameterizedType_ParameterizedStruct {
	if x, ok := x.GetKind().(*ParameterizedType_Struct); ok {
		return x.Struct
	}
	return nil
}

func (x *ParameterizedType) GetList() *ParameterizedType_ParameterizedList {
	if x, ok := x.GetKind().(*ParameterizedType_List); ok {
		return x.List
	}
	return nil
}

func (x *ParameterizedType) GetMap() *ParameterizedType_ParameterizedMap {
	if x, ok := x.GetKind().(*ParameterizedType_Map); ok {
		return x.Map
	}
	return nil
}

func (x *ParameterizedType) GetUserDefined() *ParameterizedType_ParameterizedUserDefined {
	if x, ok := x.GetKind().(*ParameterizedType_UserDefined); ok {
		return x.UserDefined
	}
	return nil
}

// Deprecated: Marked as deprecated in substrait/parameterized_types.proto.
func (x *ParameterizedType) GetUserDefinedPointer() uint32 {
	if x, ok := x.GetKind().(*ParameterizedType_UserDefinedPointer); ok {
		return x.UserDefinedPointer
	}
	return 0
}

func (x *ParameterizedType) GetTypeParameter() *ParameterizedType_TypeParameter {
	if x, ok := x.GetKind().(*ParameterizedType_TypeParameter_); ok {
		return x.TypeParameter
	}
	return nil
}

type isParameterizedType_Kind interface {
	isParameterizedType_Kind()
}

type ParameterizedType_Bool struct {
	Bool *Type_Boolean `protobuf:"bytes,1,opt,name=bool,proto3,oneof"`
}

type ParameterizedType_I8 struct {
	I8 *Type_I8 `protobuf:"bytes,2,opt,name=i8,proto3,oneof"`
}

type ParameterizedType_I16 struct {
	I16 *Type_I16 `protobuf:"bytes,3,opt,name=i16,proto3,oneof"`
}

type ParameterizedType_I32 struct {
	I32 *Type_I32 `protobuf:"bytes,5,opt,name=i32,proto3,oneof"`
}

type ParameterizedType_I64 struct {
	I64 *Type_I64 `protobuf:"bytes,7,opt,name=i64,proto3,oneof"`
}

type ParameterizedType_Fp32 struct {
	Fp32 *Type_FP32 `protobuf:"bytes,10,opt,name=fp32,proto3,oneof"`
}

type ParameterizedType_Fp64 struct {
	Fp64 *Type_FP64 `protobuf:"bytes,11,opt,name=fp64,proto3,oneof"`
}

type ParameterizedType_String_ struct {
	String_ *Type_String `protobuf:"bytes,12,opt,name=string,proto3,oneof"`
}

type ParameterizedType_Binary struct {
	Binary *Type_Binary `protobuf:"bytes,13,opt,name=binary,proto3,oneof"`
}

type ParameterizedType_Timestamp struct {
	// Deprecated in favor of `ParameterizedPrecisionTimestamp precision_timestamp`
	//
	// Deprecated: Marked as deprecated in substrait/parameterized_types.proto.
	Timestamp *Type_Timestamp `protobuf:"bytes,14,opt,name=timestamp,proto3,oneof"`
}

type ParameterizedType_Date struct {
	Date *Type_Date `protobuf:"bytes,16,opt,name=date,proto3,oneof"`
}

type ParameterizedType_Time struct {
	// Deprecated in favor of `ParameterizedPrecisionTime precision_time`
	//
	// Deprecated: Marked as deprecated in substrait/parameterized_types.proto.
	Time *Type_Time `protobuf:"bytes,17,opt,name=time,proto3,oneof"`
}

type ParameterizedType_IntervalYear struct {
	IntervalYear *Type_IntervalYear `protobuf:"bytes,19,opt,name=interval_year,json=intervalYear,proto3,oneof"`
}

type ParameterizedType_IntervalDay struct {
	IntervalDay *ParameterizedType_ParameterizedIntervalDay `protobuf:"bytes,20,opt,name=interval_day,json=intervalDay,proto3,oneof"`
}

type ParameterizedType_IntervalCompound struct {
	IntervalCompound *ParameterizedType_ParameterizedIntervalCompound `protobuf:"bytes,36,opt,name=interval_compound,json=intervalCompound,proto3,oneof"`
}

type ParameterizedType_TimestampTz struct {
	// Deprecated in favor of `ParameterizedPrecisionTimestampTZ precision_timestamp_tz`
	//
	// Deprecated: Marked as deprecated in substrait/parameterized_types.proto.
	TimestampTz *Type_TimestampTZ `protobuf:"bytes,29,opt,name=timestamp_tz,json=timestampTz,proto3,oneof"`
}

type ParameterizedType_Uuid struct {
	Uuid *Type_UUID `protobuf:"bytes,32,opt,name=uuid,proto3,oneof"`
}

type ParameterizedType_FixedChar struct {
	FixedChar *ParameterizedType_ParameterizedFixedChar `protobuf:"bytes,21,opt,name=fixed_char,json=fixedChar,proto3,oneof"`
}

type ParameterizedType_Varchar struct {
	Varchar *ParameterizedType_ParameterizedVarChar `protobuf:"bytes,22,opt,name=varchar,proto3,oneof"`
}

type ParameterizedType_FixedBinary struct {
	FixedBinary *ParameterizedType_ParameterizedFixedBinary `protobuf:"bytes,23,opt,name=fixed_binary,json=fixedBinary,proto3,oneof"`
}

type ParameterizedType_Decimal struct {
	Decimal *ParameterizedType_ParameterizedDecimal `protobuf:"bytes,24,opt,name=decimal,proto3,oneof"`
}

type ParameterizedType_PrecisionTime struct {
	PrecisionTime *ParameterizedType_ParameterizedPrecisionTime `protobuf:"bytes,37,opt,name=precision_time,json=precisionTime,proto3,oneof"`
}

type ParameterizedType_PrecisionTimestamp struct {
	PrecisionTimestamp *ParameterizedType_ParameterizedPrecisionTimestamp `protobuf:"bytes,34,opt,name=precision_timestamp,json=precisionTimestamp,proto3,oneof"`
}

type ParameterizedType_PrecisionTimestampTz struct {
	PrecisionTimestampTz *ParameterizedType_ParameterizedPrecisionTimestampTZ `protobuf:"bytes,35,opt,name=precision_timestamp_tz,json=precisionTimestampTz,proto3,oneof"`
}

type ParameterizedType_Struct struct {
	Struct *ParameterizedType_ParameterizedStruct `protobuf:"bytes,25,opt,name=struct,proto3,oneof"`
}

type ParameterizedType_List struct {
	List *ParameterizedType_ParameterizedList `protobuf:"bytes,27,opt,name=list,proto3,oneof"`
}

type ParameterizedType_Map struct {
	Map *ParameterizedType_ParameterizedMap `protobuf:"bytes,28,opt,name=map,proto3,oneof"`
}

type ParameterizedType_UserDefined struct {
	UserDefined *ParameterizedType_ParameterizedUserDefined `protobuf:"bytes,30,opt,name=user_defined,json=userDefined,proto3,oneof"`
}

type ParameterizedType_UserDefinedPointer struct {
	// Deprecated in favor of user_defined, which allows nullability and
	// variations to be specified. If user_defined_pointer is encountered,
	// treat it as being non-nullable and having the default variation.
	//
	// Deprecated: Marked as deprecated in substrait/parameterized_types.proto.
	UserDefinedPointer uint32 `protobuf:"varint,31,opt,name=user_defined_pointer,json=userDefinedPointer,proto3,oneof"`
}

type ParameterizedType_TypeParameter_ struct {
	TypeParameter *ParameterizedType_TypeParameter `protobuf:"bytes,33,opt,name=type_parameter,json=typeParameter,proto3,oneof"`
}

func (*ParameterizedType_Bool) isParameterizedType_Kind() {}

func (*ParameterizedType_I8) isParameterizedType_Kind() {}

func (*ParameterizedType_I16) isParameterizedType_Kind() {}

func (*ParameterizedType_I32) isParameterizedType_Kind() {}

func (*ParameterizedType_I64) isParameterizedType_Kind() {}

func (*ParameterizedType_Fp32) isParameterizedType_Kind() {}

func (*ParameterizedType_Fp64) isParameterizedType_Kind() {}

func (*ParameterizedType_String_) isParameterizedType_Kind() {}

func (*ParameterizedType_Binary) isParameterizedType_Kind() {}

func (*ParameterizedType_Timestamp) isParameterizedType_Kind() {}

func (*ParameterizedType_Date) isParameterizedType_Kind() {}

func (*ParameterizedType_Time) isParameterizedType_Kind() {}

func (*ParameterizedType_IntervalYear) isParameterizedType_Kind() {}

func (*ParameterizedType_IntervalDay) isParameterizedType_Kind() {}

func (*ParameterizedType_IntervalCompound) isParameterizedType_Kind() {}

func (*ParameterizedType_TimestampTz) isParameterizedType_Kind() {}

func (*ParameterizedType_Uuid) isParameterizedType_Kind() {}

func (*ParameterizedType_FixedChar) isParameterizedType_Kind() {}

func (*ParameterizedType_Varchar) isParameterizedType_Kind() {}

func (*ParameterizedType_FixedBinary) isParameterizedType_Kind() {}

func (*ParameterizedType_Decimal) isParameterizedType_Kind() {}

func (*ParameterizedType_PrecisionTime) isParameterizedType_Kind() {}

func (*ParameterizedType_PrecisionTimestamp) isParameterizedType_Kind() {}

func (*ParameterizedType_PrecisionTimestampTz) isParameterizedType_Kind() {}

func (*ParameterizedType_Struct) isParameterizedType_Kind() {}

func (*ParameterizedType_List) isParameterizedType_Kind() {}

func (*ParameterizedType_Map) isParameterizedType_Kind() {}

func (*ParameterizedType_UserDefined) isParameterizedType_Kind() {}

func (*ParameterizedType_UserDefinedPointer) isParameterizedType_Kind() {}

func (*ParameterizedType_TypeParameter_) isParameterizedType_Kind() {}

type ParameterizedType_TypeParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Bounds []*ParameterizedType `protobuf:"bytes,2,rep,name=bounds,proto3" json:"bounds,omitempty"`
}

func (x *ParameterizedType_TypeParameter) Reset() {
	*x = ParameterizedType_TypeParameter{}
	mi := &file_substrait_parameterized_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterizedType_TypeParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterizedType_TypeParameter) ProtoMessage() {}

func (x *ParameterizedType_TypeParameter) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_parameterized_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterizedType_TypeParameter.ProtoReflect.Descriptor instead.
func (*ParameterizedType_TypeParameter) Descriptor() ([]byte, []int) {
	return file_substrait_parameterized_types_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ParameterizedType_TypeParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ParameterizedType_TypeParameter) GetBounds() []*ParameterizedType {
	if x != nil {
		return x.Bounds
	}
	return nil
}

type ParameterizedType_IntegerParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string                             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RangeStartInclusive *ParameterizedType_NullableInteger `protobuf:"bytes,2,opt,name=range_start_inclusive,json=rangeStartInclusive,proto3" json:"range_start_inclusive,omitempty"`
	RangeEndExclusive   *ParameterizedType_NullableInteger `protobuf:"bytes,3,opt,name=range_end_exclusive,json=rangeEndExclusive,proto3" json:"range_end_exclusive,omitempty"`
}

func (x *ParameterizedType_IntegerParameter) Reset() {
	*x = ParameterizedType_IntegerParameter{}
	mi := &file_substrait_parameterized_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterizedType_IntegerParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterizedType_IntegerParameter) ProtoMessage() {}

func (x *ParameterizedType_IntegerParameter) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_parameterized_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterizedType_IntegerParameter.ProtoReflect.Descriptor instead.
func (*ParameterizedType_IntegerParameter) Descriptor() ([]byte, []int) {
	return file_substrait_parameterized_types_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ParameterizedType_IntegerParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ParameterizedType_IntegerParameter) GetRangeStartInclusive() *ParameterizedType_NullableInteger {
	if x != nil {
		return x.RangeStartInclusive
	}
	return nil
}

func (x *ParameterizedType_IntegerParameter) GetRangeEndExclusive() *ParameterizedType_NullableInteger {
	if x != nil {
		return x.RangeEndExclusive
	}
	return nil
}

type ParameterizedType_NullableInteger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ParameterizedType_NullableInteger) Reset() {
	*x = ParameterizedType_NullableInteger{}
	mi := &file_substrait_parameterized_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterizedType_NullableInteger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterizedType_NullableInteger) ProtoMessage() {}

func (x *ParameterizedType_NullableInteger) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_parameterized_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterizedType_NullableInteger.ProtoReflect.Descriptor instead.
func (*ParameterizedType_NullableInteger) Descriptor() ([]byte, []int) {
	return file_substrait_parameterized_types_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ParameterizedType_NullableInteger) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ParameterizedType_ParameterizedFixedChar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length           *ParameterizedType_IntegerOption `protobuf:"bytes,1,opt,name=length,proto3" json:"length,omitempty"`
	VariationPointer uint32                           `protobuf:"varint,2,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability                 `protobuf:"varint,3,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *ParameterizedType_ParameterizedFixedChar) Reset() {
	*x = ParameterizedType_ParameterizedFixedChar{}
	mi := &file_substrait_parameterized_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterizedType_ParameterizedFixedChar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterizedType_ParameterizedFixedChar) ProtoMessage() {}

func (x *ParameterizedType_ParameterizedFixedChar) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_parameterized_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterizedType_ParameterizedFixedChar.ProtoReflect.Descriptor instead.
func (*ParameterizedType_ParameterizedFixedChar) Descriptor() ([]byte, []int) {
	return file_substrait_parameterized_types_proto_rawDescGZIP(), []int{0, 3}
}

func (x *ParameterizedType_ParameterizedFixedChar) GetLength() *ParameterizedType_IntegerOption {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *ParameterizedType_ParameterizedFixedChar) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *ParameterizedType_ParameterizedFixedChar) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type ParameterizedType_ParameterizedVarChar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length           *ParameterizedType_IntegerOption `protobuf:"bytes,1,opt,name=length,proto3" json:"length,omitempty"`
	VariationPointer uint32                           `protobuf:"varint,2,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability                 `protobuf:"varint,3,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *ParameterizedType_ParameterizedVarChar) Reset() {
	*x = ParameterizedType_ParameterizedVarChar{}
	mi := &file_substrait_parameterized_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterizedType_ParameterizedVarChar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterizedType_ParameterizedVarChar) ProtoMessage() {}

func (x *ParameterizedType_ParameterizedVarChar) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_parameterized_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterizedType_ParameterizedVarChar.ProtoReflect.Descriptor instead.
func (*ParameterizedType_ParameterizedVarChar) Descriptor() ([]byte, []int) {
	return file_substrait_parameterized_types_proto_rawDescGZIP(), []int{0, 4}
}

func (x *ParameterizedType_ParameterizedVarChar) GetLength() *ParameterizedType_IntegerOption {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *ParameterizedType_ParameterizedVarChar) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *ParameterizedType_ParameterizedVarChar) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type ParameterizedType_ParameterizedFixedBinary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length           *ParameterizedType_IntegerOption `protobuf:"bytes,1,opt,name=length,proto3" json:"length,omitempty"`
	VariationPointer uint32                           `protobuf:"varint,2,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability                 `protobuf:"varint,3,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *ParameterizedType_ParameterizedFixedBinary) Reset() {
	*x = ParameterizedType_ParameterizedFixedBinary{}
	mi := &file_substrait_parameterized_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterizedType_ParameterizedFixedBinary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterizedType_ParameterizedFixedBinary) ProtoMessage() {}

func (x *ParameterizedType_ParameterizedFixedBinary) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_parameterized_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterizedType_ParameterizedFixedBinary.ProtoReflect.Descriptor instead.
func (*ParameterizedType_ParameterizedFixedBinary) Descriptor() ([]byte, []int) {
	return file_substrait_parameterized_types_proto_rawDescGZIP(), []int{0, 5}
}

func (x *ParameterizedType_ParameterizedFixedBinary) GetLength() *ParameterizedType_IntegerOption {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *ParameterizedType_ParameterizedFixedBinary) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *ParameterizedType_ParameterizedFixedBinary) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type ParameterizedType_ParameterizedDecimal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scale            *ParameterizedType_IntegerOption `protobuf:"bytes,1,opt,name=scale,proto3" json:"scale,omitempty"`
	Precision        *ParameterizedType_IntegerOption `protobuf:"bytes,2,opt,name=precision,proto3" json:"precision,omitempty"`
	VariationPointer uint32                           `protobuf:"varint,3,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability                 `protobuf:"varint,4,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *ParameterizedType_ParameterizedDecimal) Reset() {
	*x = ParameterizedType_ParameterizedDecimal{}
	mi := &file_substrait_parameterized_types_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterizedType_ParameterizedDecimal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterizedType_ParameterizedDecimal) ProtoMessage() {}

func (x *ParameterizedType_ParameterizedDecimal) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_parameterized_types_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterizedType_ParameterizedDecimal.ProtoReflect.Descriptor instead.
func (*ParameterizedType_ParameterizedDecimal) Descriptor() ([]byte, []int) {
	return file_substrait_parameterized_types_proto_rawDescGZIP(), []int{0, 6}
}

func (x *ParameterizedType_ParameterizedDecimal) GetScale() *ParameterizedType_IntegerOption {
	if x != nil {
		return x.Scale
	}
	return nil
}

func (x *ParameterizedType_ParameterizedDecimal) GetPrecision() *ParameterizedType_IntegerOption {
	if x != nil {
		return x.Precision
	}
	return nil
}

func (x *ParameterizedType_ParameterizedDecimal) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *ParameterizedType_ParameterizedDecimal) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type ParameterizedType_ParameterizedIntervalDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Precision        *ParameterizedType_IntegerOption `protobuf:"bytes,1,opt,name=precision,proto3" json:"precision,omitempty"`
	VariationPointer uint32                           `protobuf:"varint,2,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability                 `protobuf:"varint,3,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *ParameterizedType_ParameterizedIntervalDay) Reset() {
	*x = ParameterizedType_ParameterizedIntervalDay{}
	mi := &file_substrait_parameterized_types_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterizedType_ParameterizedIntervalDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterizedType_ParameterizedIntervalDay) ProtoMessage() {}

func (x *ParameterizedType_ParameterizedIntervalDay) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_parameterized_types_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterizedType_ParameterizedIntervalDay.ProtoReflect.Descriptor instead.
func (*ParameterizedType_ParameterizedIntervalDay) Descriptor() ([]byte, []int) {
	return file_substrait_parameterized_types_proto_rawDescGZIP(), []int{0, 7}
}

func (x *ParameterizedType_ParameterizedIntervalDay) GetPrecision() *ParameterizedType_IntegerOption {
	if x != nil {
		return x.Precision
	}
	return nil
}

func (x *ParameterizedType_ParameterizedIntervalDay) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *ParameterizedType_ParameterizedIntervalDay) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type ParameterizedType_ParameterizedIntervalCompound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Precision        *ParameterizedType_IntegerOption `protobuf:"bytes,1,opt,name=precision,proto3" json:"precision,omitempty"`
	VariationPointer uint32                           `protobuf:"varint,2,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability                 `protobuf:"varint,3,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *ParameterizedType_ParameterizedIntervalCompound) Reset() {
	*x = ParameterizedType_ParameterizedIntervalCompound{}
	mi := &file_substrait_parameterized_types_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterizedType_ParameterizedIntervalCompound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterizedType_ParameterizedIntervalCompound) ProtoMessage() {}

func (x *ParameterizedType_ParameterizedIntervalCompound) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_parameterized_types_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterizedType_ParameterizedIntervalCompound.ProtoReflect.Descriptor instead.
func (*ParameterizedType_ParameterizedIntervalCompound) Descriptor() ([]byte, []int) {
	return file_substrait_parameterized_types_proto_rawDescGZIP(), []int{0, 8}
}

func (x *ParameterizedType_ParameterizedIntervalCompound) GetPrecision() *ParameterizedType_IntegerOption {
	if x != nil {
		return x.Precision
	}
	return nil
}

func (x *ParameterizedType_ParameterizedIntervalCompound) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *ParameterizedType_ParameterizedIntervalCompound) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type ParameterizedType_ParameterizedPrecisionTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Precision        *ParameterizedType_IntegerOption `protobuf:"bytes,1,opt,name=precision,proto3" json:"precision,omitempty"`
	VariationPointer uint32                           `protobuf:"varint,2,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability                 `protobuf:"varint,3,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *ParameterizedType_ParameterizedPrecisionTime) Reset() {
	*x = ParameterizedType_ParameterizedPrecisionTime{}
	mi := &file_substrait_parameterized_types_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterizedType_ParameterizedPrecisionTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterizedType_ParameterizedPrecisionTime) ProtoMessage() {}

func (x *ParameterizedType_ParameterizedPrecisionTime) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_parameterized_types_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterizedType_ParameterizedPrecisionTime.ProtoReflect.Descriptor instead.
func (*ParameterizedType_ParameterizedPrecisionTime) Descriptor() ([]byte, []int) {
	return file_substrait_parameterized_types_proto_rawDescGZIP(), []int{0, 9}
}

func (x *ParameterizedType_ParameterizedPrecisionTime) GetPrecision() *ParameterizedType_IntegerOption {
	if x != nil {
		return x.Precision
	}
	return nil
}

func (x *ParameterizedType_ParameterizedPrecisionTime) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *ParameterizedType_ParameterizedPrecisionTime) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type ParameterizedType_ParameterizedPrecisionTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Precision        *ParameterizedType_IntegerOption `protobuf:"bytes,1,opt,name=precision,proto3" json:"precision,omitempty"`
	VariationPointer uint32                           `protobuf:"varint,2,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability                 `protobuf:"varint,3,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *ParameterizedType_ParameterizedPrecisionTimestamp) Reset() {
	*x = ParameterizedType_ParameterizedPrecisionTimestamp{}
	mi := &file_substrait_parameterized_types_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterizedType_ParameterizedPrecisionTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterizedType_ParameterizedPrecisionTimestamp) ProtoMessage() {}

func (x *ParameterizedType_ParameterizedPrecisionTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_parameterized_types_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterizedType_ParameterizedPrecisionTimestamp.ProtoReflect.Descriptor instead.
func (*ParameterizedType_ParameterizedPrecisionTimestamp) Descriptor() ([]byte, []int) {
	return file_substrait_parameterized_types_proto_rawDescGZIP(), []int{0, 10}
}

func (x *ParameterizedType_ParameterizedPrecisionTimestamp) GetPrecision() *ParameterizedType_IntegerOption {
	if x != nil {
		return x.Precision
	}
	return nil
}

func (x *ParameterizedType_ParameterizedPrecisionTimestamp) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *ParameterizedType_ParameterizedPrecisionTimestamp) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type ParameterizedType_ParameterizedPrecisionTimestampTZ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Precision        *ParameterizedType_IntegerOption `protobuf:"bytes,1,opt,name=precision,proto3" json:"precision,omitempty"`
	VariationPointer uint32                           `protobuf:"varint,2,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability                 `protobuf:"varint,3,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *ParameterizedType_ParameterizedPrecisionTimestampTZ) Reset() {
	*x = ParameterizedType_ParameterizedPrecisionTimestampTZ{}
	mi := &file_substrait_parameterized_types_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterizedType_ParameterizedPrecisionTimestampTZ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterizedType_ParameterizedPrecisionTimestampTZ) ProtoMessage() {}

func (x *ParameterizedType_ParameterizedPrecisionTimestampTZ) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_parameterized_types_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterizedType_ParameterizedPrecisionTimestampTZ.ProtoReflect.Descriptor instead.
func (*ParameterizedType_ParameterizedPrecisionTimestampTZ) Descriptor() ([]byte, []int) {
	return file_substrait_parameterized_types_proto_rawDescGZIP(), []int{0, 11}
}

func (x *ParameterizedType_ParameterizedPrecisionTimestampTZ) GetPrecision() *ParameterizedType_IntegerOption {
	if x != nil {
		return x.Precision
	}
	return nil
}

func (x *ParameterizedType_ParameterizedPrecisionTimestampTZ) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *ParameterizedType_ParameterizedPrecisionTimestampTZ) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type ParameterizedType_ParameterizedStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types            []*ParameterizedType `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
	VariationPointer uint32               `protobuf:"varint,2,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability     `protobuf:"varint,3,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *ParameterizedType_ParameterizedStruct) Reset() {
	*x = ParameterizedType_ParameterizedStruct{}
	mi := &file_substrait_parameterized_types_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterizedType_ParameterizedStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterizedType_ParameterizedStruct) ProtoMessage() {}

func (x *ParameterizedType_ParameterizedStruct) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_parameterized_types_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterizedType_ParameterizedStruct.ProtoReflect.Descriptor instead.
func (*ParameterizedType_ParameterizedStruct) Descriptor() ([]byte, []int) {
	return file_substrait_parameterized_types_proto_rawDescGZIP(), []int{0, 12}
}

func (x *ParameterizedType_ParameterizedStruct) GetTypes() []*ParameterizedType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *ParameterizedType_ParameterizedStruct) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *ParameterizedType_ParameterizedStruct) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type ParameterizedType_ParameterizedNamedStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of names in dfs order
	Names  []string                               `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	Struct *ParameterizedType_ParameterizedStruct `protobuf:"bytes,2,opt,name=struct,proto3" json:"struct,omitempty"`
}

func (x *ParameterizedType_ParameterizedNamedStruct) Reset() {
	*x = ParameterizedType_ParameterizedNamedStruct{}
	mi := &file_substrait_parameterized_types_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterizedType_ParameterizedNamedStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterizedType_ParameterizedNamedStruct) ProtoMessage() {}

func (x *ParameterizedType_ParameterizedNamedStruct) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_parameterized_types_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterizedType_ParameterizedNamedStruct.ProtoReflect.Descriptor instead.
func (*ParameterizedType_ParameterizedNamedStruct) Descriptor() ([]byte, []int) {
	return file_substrait_parameterized_types_proto_rawDescGZIP(), []int{0, 13}
}

func (x *ParameterizedType_ParameterizedNamedStruct) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *ParameterizedType_ParameterizedNamedStruct) GetStruct() *ParameterizedType_ParameterizedStruct {
	if x != nil {
		return x.Struct
	}
	return nil
}

type ParameterizedType_ParameterizedList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             *ParameterizedType `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	VariationPointer uint32             `protobuf:"varint,2,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability   `protobuf:"varint,3,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *ParameterizedType_ParameterizedList) Reset() {
	*x = ParameterizedType_ParameterizedList{}
	mi := &file_substrait_parameterized_types_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterizedType_ParameterizedList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterizedType_ParameterizedList) ProtoMessage() {}

func (x *ParameterizedType_ParameterizedList) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_parameterized_types_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterizedType_ParameterizedList.ProtoReflect.Descriptor instead.
func (*ParameterizedType_ParameterizedList) Descriptor() ([]byte, []int) {
	return file_substrait_parameterized_types_proto_rawDescGZIP(), []int{0, 14}
}

func (x *ParameterizedType_ParameterizedList) GetType() *ParameterizedType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ParameterizedType_ParameterizedList) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *ParameterizedType_ParameterizedList) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type ParameterizedType_ParameterizedMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key              *ParameterizedType `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value            *ParameterizedType `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	VariationPointer uint32             `protobuf:"varint,3,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability   `protobuf:"varint,4,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *ParameterizedType_ParameterizedMap) Reset() {
	*x = ParameterizedType_ParameterizedMap{}
	mi := &file_substrait_parameterized_types_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterizedType_ParameterizedMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterizedType_ParameterizedMap) ProtoMessage() {}

func (x *ParameterizedType_ParameterizedMap) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_parameterized_types_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterizedType_ParameterizedMap.ProtoReflect.Descriptor instead.
func (*ParameterizedType_ParameterizedMap) Descriptor() ([]byte, []int) {
	return file_substrait_parameterized_types_proto_rawDescGZIP(), []int{0, 15}
}

func (x *ParameterizedType_ParameterizedMap) GetKey() *ParameterizedType {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ParameterizedType_ParameterizedMap) GetValue() *ParameterizedType {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ParameterizedType_ParameterizedMap) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *ParameterizedType_ParameterizedMap) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type ParameterizedType_ParameterizedUserDefined struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypePointer      uint32           `protobuf:"varint,1,opt,name=type_pointer,json=typePointer,proto3" json:"type_pointer,omitempty"`
	VariationPointer uint32           `protobuf:"varint,2,opt,name=variation_pointer,json=variationPointer,proto3" json:"variation_pointer,omitempty"`
	Nullability      Type_Nullability `protobuf:"varint,3,opt,name=nullability,proto3,enum=substrait.Type_Nullability" json:"nullability,omitempty"`
}

func (x *ParameterizedType_ParameterizedUserDefined) Reset() {
	*x = ParameterizedType_ParameterizedUserDefined{}
	mi := &file_substrait_parameterized_types_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterizedType_ParameterizedUserDefined) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterizedType_ParameterizedUserDefined) ProtoMessage() {}

func (x *ParameterizedType_ParameterizedUserDefined) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_parameterized_types_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterizedType_ParameterizedUserDefined.ProtoReflect.Descriptor instead.
func (*ParameterizedType_ParameterizedUserDefined) Descriptor() ([]byte, []int) {
	return file_substrait_parameterized_types_proto_rawDescGZIP(), []int{0, 16}
}

func (x *ParameterizedType_ParameterizedUserDefined) GetTypePointer() uint32 {
	if x != nil {
		return x.TypePointer
	}
	return 0
}

func (x *ParameterizedType_ParameterizedUserDefined) GetVariationPointer() uint32 {
	if x != nil {
		return x.VariationPointer
	}
	return 0
}

func (x *ParameterizedType_ParameterizedUserDefined) GetNullability() Type_Nullability {
	if x != nil {
		return x.Nullability
	}
	return Type_NULLABILITY_UNSPECIFIED
}

type ParameterizedType_IntegerOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to IntegerType:
	//
	//	*ParameterizedType_IntegerOption_Literal
	//	*ParameterizedType_IntegerOption_Parameter
	IntegerType isParameterizedType_IntegerOption_IntegerType `protobuf_oneof:"integer_type"`
}

func (x *ParameterizedType_IntegerOption) Reset() {
	*x = ParameterizedType_IntegerOption{}
	mi := &file_substrait_parameterized_types_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterizedType_IntegerOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterizedType_IntegerOption) ProtoMessage() {}

func (x *ParameterizedType_IntegerOption) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_parameterized_types_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterizedType_IntegerOption.ProtoReflect.Descriptor instead.
func (*ParameterizedType_IntegerOption) Descriptor() ([]byte, []int) {
	return file_substrait_parameterized_types_proto_rawDescGZIP(), []int{0, 17}
}

func (m *ParameterizedType_IntegerOption) GetIntegerType() isParameterizedType_IntegerOption_IntegerType {
	if m != nil {
		return m.IntegerType
	}
	return nil
}

func (x *ParameterizedType_IntegerOption) GetLiteral() int32 {
	if x, ok := x.GetIntegerType().(*ParameterizedType_IntegerOption_Literal); ok {
		return x.Literal
	}
	return 0
}

func (x *ParameterizedType_IntegerOption) GetParameter() *ParameterizedType_IntegerParameter {
	if x, ok := x.GetIntegerType().(*ParameterizedType_IntegerOption_Parameter); ok {
		return x.Parameter
	}
	return nil
}

type isParameterizedType_IntegerOption_IntegerType interface {
	isParameterizedType_IntegerOption_IntegerType()
}

type ParameterizedType_IntegerOption_Literal struct {
	Literal int32 `protobuf:"varint,1,opt,name=literal,proto3,oneof"`
}

type ParameterizedType_IntegerOption_Parameter struct {
	Parameter *ParameterizedType_IntegerParameter `protobuf:"bytes,2,opt,name=parameter,proto3,oneof"`
}

func (*ParameterizedType_IntegerOption_Literal) isParameterizedType_IntegerOption_IntegerType() {}

func (*ParameterizedType_IntegerOption_Parameter) isParameterizedType_IntegerOption_IntegerType() {}

var File_substrait_parameterized_types_proto protoreflect.FileDescriptor

var file_substrait_parameterized_types_proto_rawDesc = []byte{
	0x0a, 0x23, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x1a, 0x14, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x2a, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x04,
	0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x02, 0x69,
	0x38, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x38, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x38, 0x12, 0x27, 0x0a, 0x03, 0x69, 0x31, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x49, 0x31, 0x36, 0x48, 0x00, 0x52, 0x03, 0x69, 0x31, 0x36, 0x12, 0x27, 0x0a, 0x03, 0x69, 0x33,
	0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x33, 0x32, 0x48, 0x00, 0x52, 0x03,
	0x69, 0x33, 0x32, 0x12, 0x27, 0x0a, 0x03, 0x69, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x49, 0x36, 0x34, 0x48, 0x00, 0x52, 0x03, 0x69, 0x36, 0x34, 0x12, 0x2a, 0x0a, 0x04,
	0x66, 0x70, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x50, 0x33, 0x32,
	0x48, 0x00, 0x52, 0x04, 0x66, 0x70, 0x33, 0x32, 0x12, 0x2a, 0x0a, 0x04, 0x66, 0x70, 0x36, 0x34,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x50, 0x36, 0x34, 0x48, 0x00, 0x52, 0x04,
	0x66, 0x70, 0x36, 0x34, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x79, 0x65, 0x61, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x12, 0x5a, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x44, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x44, 0x61, 0x79, 0x12, 0x69, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x10, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x44, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x7a, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x54, 0x5a, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x54, 0x7a, 0x12, 0x2a, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x48, 0x00, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x54, 0x0a, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x12, 0x4d, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x63, 0x68,
	0x61, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x56, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x48, 0x00, 0x52, 0x07, 0x76,
	0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x12, 0x5a, 0x0a, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x12, 0x4d, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x12, 0x60, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x6f, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00,
	0x52, 0x12, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x76, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x7a, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x54, 0x5a, 0x48, 0x00, 0x52, 0x14, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x7a, 0x12, 0x4a, 0x0a, 0x06,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61,
	0x70, 0x12, 0x5a, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x36, 0x0a,
	0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x48,
	0x00, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x79, 0x70,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x1a, 0x59, 0x0a, 0x0d, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x1a, 0xe6, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x60,
	0x0a, 0x15, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x13, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x12, 0x5c, 0x0a, 0x13, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x11, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x45, 0x6e, 0x64, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x1a, 0x27,
	0x0a, 0x0f, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xc8, 0x01, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x72, 0x12, 0x42, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x1a, 0xc6, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x56, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x12, 0x42, 0x0a, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x2b, 0x0a, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b,
	0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b,
	0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xca, 0x01, 0x0a, 0x18,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x11,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x75, 0x6c,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x6e, 0x75, 0x6c,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x8e, 0x02, 0x0a, 0x14, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x6e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xd0, 0x01, 0x0a, 0x18, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x12, 0x48, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a,
	0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xd5, 0x01, 0x0a,
	0x1d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x48,
	0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x1a, 0xd2, 0x01, 0x0a, 0x1a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x6e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xd7, 0x01, 0x0a, 0x1f, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x48, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x1a, 0xd9, 0x01, 0x0a, 0x21, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x5a, 0x12, 0x48, 0x0a, 0x09, 0x70, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a,
	0xb5, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x75, 0x6c, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x6e, 0x75, 0x6c, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x7a, 0x0a, 0x18, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x1a, 0xb1, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x75, 0x6c, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x6e, 0x75, 0x6c, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xe2, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x2e, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a,
	0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xa9, 0x01, 0x0a,
	0x18, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x74, 0x79, 0x70, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x75, 0x6c,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x6e, 0x75, 0x6c,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x8a, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x6c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x6c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x42, 0x66, 0x0a,
	0x12, 0x69, 0x6f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x70, 0x62,
	0xaa, 0x02, 0x12, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_substrait_parameterized_types_proto_rawDescOnce sync.Once
	file_substrait_parameterized_types_proto_rawDescData = file_substrait_parameterized_types_proto_rawDesc
)

func file_substrait_parameterized_types_proto_rawDescGZIP() []byte {
	file_substrait_parameterized_types_proto_rawDescOnce.Do(func() {
		file_substrait_parameterized_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_substrait_parameterized_types_proto_rawDescData)
	})
	return file_substrait_parameterized_types_proto_rawDescData
}

var file_substrait_parameterized_types_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_substrait_parameterized_types_proto_goTypes = []any{
	(*ParameterizedType)(nil),                                   // 0: substrait.ParameterizedType
	(*ParameterizedType_TypeParameter)(nil),                     // 1: substrait.ParameterizedType.TypeParameter
	(*ParameterizedType_IntegerParameter)(nil),                  // 2: substrait.ParameterizedType.IntegerParameter
	(*ParameterizedType_NullableInteger)(nil),                   // 3: substrait.ParameterizedType.NullableInteger
	(*ParameterizedType_ParameterizedFixedChar)(nil),            // 4: substrait.ParameterizedType.ParameterizedFixedChar
	(*ParameterizedType_ParameterizedVarChar)(nil),              // 5: substrait.ParameterizedType.ParameterizedVarChar
	(*ParameterizedType_ParameterizedFixedBinary)(nil),          // 6: substrait.ParameterizedType.ParameterizedFixedBinary
	(*ParameterizedType_ParameterizedDecimal)(nil),              // 7: substrait.ParameterizedType.ParameterizedDecimal
	(*ParameterizedType_ParameterizedIntervalDay)(nil),          // 8: substrait.ParameterizedType.ParameterizedIntervalDay
	(*ParameterizedType_ParameterizedIntervalCompound)(nil),     // 9: substrait.ParameterizedType.ParameterizedIntervalCompound
	(*ParameterizedType_ParameterizedPrecisionTime)(nil),        // 10: substrait.ParameterizedType.ParameterizedPrecisionTime
	(*ParameterizedType_ParameterizedPrecisionTimestamp)(nil),   // 11: substrait.ParameterizedType.ParameterizedPrecisionTimestamp
	(*ParameterizedType_ParameterizedPrecisionTimestampTZ)(nil), // 12: substrait.ParameterizedType.ParameterizedPrecisionTimestampTZ
	(*ParameterizedType_ParameterizedStruct)(nil),               // 13: substrait.ParameterizedType.ParameterizedStruct
	(*ParameterizedType_ParameterizedNamedStruct)(nil),          // 14: substrait.ParameterizedType.ParameterizedNamedStruct
	(*ParameterizedType_ParameterizedList)(nil),                 // 15: substrait.ParameterizedType.ParameterizedList
	(*ParameterizedType_ParameterizedMap)(nil),                  // 16: substrait.ParameterizedType.ParameterizedMap
	(*ParameterizedType_ParameterizedUserDefined)(nil),          // 17: substrait.ParameterizedType.ParameterizedUserDefined
	(*ParameterizedType_IntegerOption)(nil),                     // 18: substrait.ParameterizedType.IntegerOption
	(*Type_Boolean)(nil),                                        // 19: substrait.Type.Boolean
	(*Type_I8)(nil),                                             // 20: substrait.Type.I8
	(*Type_I16)(nil),                                            // 21: substrait.Type.I16
	(*Type_I32)(nil),                                            // 22: substrait.Type.I32
	(*Type_I64)(nil),                                            // 23: substrait.Type.I64
	(*Type_FP32)(nil),                                           // 24: substrait.Type.FP32
	(*Type_FP64)(nil),                                           // 25: substrait.Type.FP64
	(*Type_String)(nil),                                         // 26: substrait.Type.String
	(*Type_Binary)(nil),                                         // 27: substrait.Type.Binary
	(*Type_Timestamp)(nil),                                      // 28: substrait.Type.Timestamp
	(*Type_Date)(nil),                                           // 29: substrait.Type.Date
	(*Type_Time)(nil),                                           // 30: substrait.Type.Time
	(*Type_IntervalYear)(nil),                                   // 31: substrait.Type.IntervalYear
	(*Type_TimestampTZ)(nil),                                    // 32: substrait.Type.TimestampTZ
	(*Type_UUID)(nil),                                           // 33: substrait.Type.UUID
	(Type_Nullability)(0),                                       // 34: substrait.Type.Nullability
}
var file_substrait_parameterized_types_proto_depIdxs = []int32{
	19, // 0: substrait.ParameterizedType.bool:type_name -> substrait.Type.Boolean
	20, // 1: substrait.ParameterizedType.i8:type_name -> substrait.Type.I8
	21, // 2: substrait.ParameterizedType.i16:type_name -> substrait.Type.I16
	22, // 3: substrait.ParameterizedType.i32:type_name -> substrait.Type.I32
	23, // 4: substrait.ParameterizedType.i64:type_name -> substrait.Type.I64
	24, // 5: substrait.ParameterizedType.fp32:type_name -> substrait.Type.FP32
	25, // 6: substrait.ParameterizedType.fp64:type_name -> substrait.Type.FP64
	26, // 7: substrait.ParameterizedType.string:type_name -> substrait.Type.String
	27, // 8: substrait.ParameterizedType.binary:type_name -> substrait.Type.Binary
	28, // 9: substrait.ParameterizedType.timestamp:type_name -> substrait.Type.Timestamp
	29, // 10: substrait.ParameterizedType.date:type_name -> substrait.Type.Date
	30, // 11: substrait.ParameterizedType.time:type_name -> substrait.Type.Time
	31, // 12: substrait.ParameterizedType.interval_year:type_name -> substrait.Type.IntervalYear
	8,  // 13: substrait.ParameterizedType.interval_day:type_name -> substrait.ParameterizedType.ParameterizedIntervalDay
	9,  // 14: substrait.ParameterizedType.interval_compound:type_name -> substrait.ParameterizedType.ParameterizedIntervalCompound
	32, // 15: substrait.ParameterizedType.timestamp_tz:type_name -> substrait.Type.TimestampTZ
	33, // 16: substrait.ParameterizedType.uuid:type_name -> substrait.Type.UUID
	4,  // 17: substrait.ParameterizedType.fixed_char:type_name -> substrait.ParameterizedType.ParameterizedFixedChar
	5,  // 18: substrait.ParameterizedType.varchar:type_name -> substrait.ParameterizedType.ParameterizedVarChar
	6,  // 19: substrait.ParameterizedType.fixed_binary:type_name -> substrait.ParameterizedType.ParameterizedFixedBinary
	7,  // 20: substrait.ParameterizedType.decimal:type_name -> substrait.ParameterizedType.ParameterizedDecimal
	10, // 21: substrait.ParameterizedType.precision_time:type_name -> substrait.ParameterizedType.ParameterizedPrecisionTime
	11, // 22: substrait.ParameterizedType.precision_timestamp:type_name -> substrait.ParameterizedType.ParameterizedPrecisionTimestamp
	12, // 23: substrait.ParameterizedType.precision_timestamp_tz:type_name -> substrait.ParameterizedType.ParameterizedPrecisionTimestampTZ
	13, // 24: substrait.ParameterizedType.struct:type_name -> substrait.ParameterizedType.ParameterizedStruct
	15, // 25: substrait.ParameterizedType.list:type_name -> substrait.ParameterizedType.ParameterizedList
	16, // 26: substrait.ParameterizedType.map:type_name -> substrait.ParameterizedType.ParameterizedMap
	17, // 27: substrait.ParameterizedType.user_defined:type_name -> substrait.ParameterizedType.ParameterizedUserDefined
	1,  // 28: substrait.ParameterizedType.type_parameter:type_name -> substrait.ParameterizedType.TypeParameter
	0,  // 29: substrait.ParameterizedType.TypeParameter.bounds:type_name -> substrait.ParameterizedType
	3,  // 30: substrait.ParameterizedType.IntegerParameter.range_start_inclusive:type_name -> substrait.ParameterizedType.NullableInteger
	3,  // 31: substrait.ParameterizedType.IntegerParameter.range_end_exclusive:type_name -> substrait.ParameterizedType.NullableInteger
	18, // 32: substrait.ParameterizedType.ParameterizedFixedChar.length:type_name -> substrait.ParameterizedType.IntegerOption
	34, // 33: substrait.ParameterizedType.ParameterizedFixedChar.nullability:type_name -> substrait.Type.Nullability
	18, // 34: substrait.ParameterizedType.ParameterizedVarChar.length:type_name -> substrait.ParameterizedType.IntegerOption
	34, // 35: substrait.ParameterizedType.ParameterizedVarChar.nullability:type_name -> substrait.Type.Nullability
	18, // 36: substrait.ParameterizedType.ParameterizedFixedBinary.length:type_name -> substrait.ParameterizedType.IntegerOption
	34, // 37: substrait.ParameterizedType.ParameterizedFixedBinary.nullability:type_name -> substrait.Type.Nullability
	18, // 38: substrait.ParameterizedType.ParameterizedDecimal.scale:type_name -> substrait.ParameterizedType.IntegerOption
	18, // 39: substrait.ParameterizedType.ParameterizedDecimal.precision:type_name -> substrait.ParameterizedType.IntegerOption
	34, // 40: substrait.ParameterizedType.ParameterizedDecimal.nullability:type_name -> substrait.Type.Nullability
	18, // 41: substrait.ParameterizedType.ParameterizedIntervalDay.precision:type_name -> substrait.ParameterizedType.IntegerOption
	34, // 42: substrait.ParameterizedType.ParameterizedIntervalDay.nullability:type_name -> substrait.Type.Nullability
	18, // 43: substrait.ParameterizedType.ParameterizedIntervalCompound.precision:type_name -> substrait.ParameterizedType.IntegerOption
	34, // 44: substrait.ParameterizedType.ParameterizedIntervalCompound.nullability:type_name -> substrait.Type.Nullability
	18, // 45: substrait.ParameterizedType.ParameterizedPrecisionTime.precision:type_name -> substrait.ParameterizedType.IntegerOption
	34, // 46: substrait.ParameterizedType.ParameterizedPrecisionTime.nullability:type_name -> substrait.Type.Nullability
	18, // 47: substrait.ParameterizedType.ParameterizedPrecisionTimestamp.precision:type_name -> substrait.ParameterizedType.IntegerOption
	34, // 48: substrait.ParameterizedType.ParameterizedPrecisionTimestamp.nullability:type_name -> substrait.Type.Nullability
	18, // 49: substrait.ParameterizedType.ParameterizedPrecisionTimestampTZ.precision:type_name -> substrait.ParameterizedType.IntegerOption
	34, // 50: substrait.ParameterizedType.ParameterizedPrecisionTimestampTZ.nullability:type_name -> substrait.Type.Nullability
	0,  // 51: substrait.ParameterizedType.ParameterizedStruct.types:type_name -> substrait.ParameterizedType
	34, // 52: substrait.ParameterizedType.ParameterizedStruct.nullability:type_name -> substrait.Type.Nullability
	13, // 53: substrait.ParameterizedType.ParameterizedNamedStruct.struct:type_name -> substrait.ParameterizedType.ParameterizedStruct
	0,  // 54: substrait.ParameterizedType.ParameterizedList.type:type_name -> substrait.ParameterizedType
	34, // 55: substrait.ParameterizedType.ParameterizedList.nullability:type_name -> substrait.Type.Nullability
	0,  // 56: substrait.ParameterizedType.ParameterizedMap.key:type_name -> substrait.ParameterizedType
	0,  // 57: substrait.ParameterizedType.ParameterizedMap.value:type_name -> substrait.ParameterizedType
	34, // 58: substrait.ParameterizedType.ParameterizedMap.nullability:type_name -> substrait.Type.Nullability
	34, // 59: substrait.ParameterizedType.ParameterizedUserDefined.nullability:type_name -> substrait.Type.Nullability
	2,  // 60: substrait.ParameterizedType.IntegerOption.parameter:type_name -> substrait.ParameterizedType.IntegerParameter
	61, // [61:61] is the sub-list for method output_type
	61, // [61:61] is the sub-list for method input_type
	61, // [61:61] is the sub-list for extension type_name
	61, // [61:61] is the sub-list for extension extendee
	0,  // [0:61] is the sub-list for field type_name
}

func init() { file_substrait_parameterized_types_proto_init() }
func file_substrait_parameterized_types_proto_init() {
	if File_substrait_parameterized_types_proto != nil {
		return
	}
	file_substrait_type_proto_init()
	file_substrait_parameterized_types_proto_msgTypes[0].OneofWrappers = []any{
		(*ParameterizedType_Bool)(nil),
		(*ParameterizedType_I8)(nil),
		(*ParameterizedType_I16)(nil),
		(*ParameterizedType_I32)(nil),
		(*ParameterizedType_I64)(nil),
		(*ParameterizedType_Fp32)(nil),
		(*ParameterizedType_Fp64)(nil),
		(*ParameterizedType_String_)(nil),
		(*ParameterizedType_Binary)(nil),
		(*ParameterizedType_Timestamp)(nil),
		(*ParameterizedType_Date)(nil),
		(*ParameterizedType_Time)(nil),
		(*ParameterizedType_IntervalYear)(nil),
		(*ParameterizedType_IntervalDay)(nil),
		(*ParameterizedType_IntervalCompound)(nil),
		(*ParameterizedType_TimestampTz)(nil),
		(*ParameterizedType_Uuid)(nil),
		(*ParameterizedType_FixedChar)(nil),
		(*ParameterizedType_Varchar)(nil),
		(*ParameterizedType_FixedBinary)(nil),
		(*ParameterizedType_Decimal)(nil),
		(*ParameterizedType_PrecisionTime)(nil),
		(*ParameterizedType_PrecisionTimestamp)(nil),
		(*ParameterizedType_PrecisionTimestampTz)(nil),
		(*ParameterizedType_Struct)(nil),
		(*ParameterizedType_List)(nil),
		(*ParameterizedType_Map)(nil),
		(*ParameterizedType_UserDefined)(nil),
		(*ParameterizedType_UserDefinedPointer)(nil),
		(*ParameterizedType_TypeParameter_)(nil),
	}
	file_substrait_parameterized_types_proto_msgTypes[18].OneofWrappers = []any{
		(*ParameterizedType_IntegerOption_Literal)(nil),
		(*ParameterizedType_IntegerOption_Parameter)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_substrait_parameterized_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_substrait_parameterized_types_proto_goTypes,
		DependencyIndexes: file_substrait_parameterized_types_proto_depIdxs,
		MessageInfos:      file_substrait_parameterized_types_proto_msgTypes,
	}.Build()
	File_substrait_parameterized_types_proto = out.File
	file_substrait_parameterized_types_proto_rawDesc = nil
	file_substrait_parameterized_types_proto_goTypes = nil
	file_substrait_parameterized_types_proto_depIdxs = nil
}
